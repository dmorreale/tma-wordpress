<?php

function EWD_UWPM_Email_All_Users($Params) {
	$Add_Unsubscribe_Link = get_option("EWD_UWPM_Add_Unsubscribe_Link");
	$Add_Unsubscribe_Checkbox = get_option("EWD_UWPM_Add_Unsubscribe_Checkbox");
	$Email_From_Name = get_option("EWD_UWPM_Email_From_Name");
	$Email_From_Email = get_option("EWD_UWPM_Email_From_Email");

	if ($Email_From_Name != '') {add_filter('wp_mail_from_name', 'EWD_UWPM_Filter_From_Name');}
	if ($Email_From_Email != '') {add_filter('wp_mail_from', 'EWD_UWPM_Filter_From');}

	if (isset($Params['Email_ID'])) {$Email = get_post($Params['Email_ID']);}
	$Email_Title = isset($Params['Email_Title']) ? $Params['Emails_Title'] : $Email->post_title;
	$Email_Content = isset($Params['Email_Content']) ? $Params['Email_Content'] : get_post_meta($Email->ID, 'EWD_UWPM_Mail_Content', true);
	
	$Email_Title = apply_filters('ewd_uwpm_title', stripslashes( $Email_Title ), $Params);

	$Email_Content = apply_filters('ewd_uwpm_content_pre_substitutions', $Email_Content, $Params);
	$Email_Content = EWD_UWPM_Replace_Classes($Email_Content, $Email->ID);

	$Headers = array('Content-Type: text/html; charset=UTF-8');
	$Headers = apply_filters('ewd_uwpm_headers', $Headers, $Params);

	$Previous_Sends = get_post_meta($Params['Email_ID'], 'EWD_UWPM_Send_Events', true);
	if (!is_array($Previous_Sends)) {$Previous_Sends = array();}

	$Max_ID = 0;
	foreach ($Previous_Sends as $Previous_Send) {$Max_ID = max($Previous_Send['ID'], $Max_ID);}
	$Event_ID = $Max_ID + 1;

	$Send_Event_Data = array(
		'ID' => $Event_ID,
		'Send_Type' => 'All',
		'Send_Time' => date("Y-m-d H:i:s")
	);

	$Sent_Emails = 0;
	$Users = get_users();
	foreach ($Users as $User) {
		$Unsubscribe = get_user_meta($User->ID, 'EWD_UWPM_User_Unsubscribe', true);

		if (($Add_Unsubscribe_Link == "Yes" or $Add_Unsubscribe_Checkbox == "Yes") and $Unsubscribe == "Yes") {continue;}

		$Email_Unique_Identifier = EWD_UWPM_Random_String(20);

		$User_Message = EWD_UWPM_Replace_Variables($Email_Content, $Email_Unique_Identifier, $Params, $User);
		$User_Message = apply_filters('ewd_uwpm_content_post_substitutions', $User_Message, $Params);

		if (wp_mail($User->user_email, $Email_Title, $User_Message, $Headers)) {
			EWD_UWPM_Record_Send($Params['Email_ID'], $User->ID, $Event_ID, $Email_Unique_Identifier);
			do_action('ewd_uwpm_email_sent', $Params, $Email_Unique_Identifier);
			$Sent_Emails++;
		}
	}

	$Send_Event_Data['Emails_Sent'] = $Sent_Emails;
	$Previous_Sends[] = $Send_Event_Data;
	update_post_meta($Params['Email_ID'], 'EWD_UWPM_Send_Events', $Previous_Sends);

	return sprintf(esc_html__("Emails successfully sent out to %d users", 'ultimate-wp-mail'), $Sent_Emails);
}

function EWD_UWPM_Email_User_List($Params) {
	global $wpdb; update_option("EWD_UWPM_Debug", $Params);

	$Add_Unsubscribe_Link = get_option("EWD_UWPM_Add_Unsubscribe_Link");
	$Add_Unsubscribe_Checkbox = get_option("EWD_UWPM_Add_Unsubscribe_Checkbox");
	$Email_From_Name = get_option("EWD_UWPM_Email_From_Name");
	$Email_From_Email = get_option("EWD_UWPM_Email_From_Email");

	if ($Email_From_Name != '') {add_filter('wp_mail_from_name', 'EWD_UWPM_Filter_From_Name');}
	if ($Email_From_Email != '') {add_filter('wp_mail_from', 'EWD_UWPM_Filter_From');}

	$Email_Lists_Array = get_option("EWD_UWPM_Email_Lists_Array");
	if (!is_array($Email_Lists_Array)) {$Email_Lists_Array = array();}
	
	if (isset($Params['Email_ID'])) {$Email = get_post($Params['Email_ID']);}
	$Email_Title = isset($Params['Email_Title']) ? $Params['Email_Title'] : $Email->post_title;
	$Email_Content = isset($Params['Email_Content']) ? $Params['Email_Content'] : get_post_meta($Email->ID, 'EWD_UWPM_Mail_Content', true);
	
	$Email_Title = apply_filters('ewd_uwpm_title', stripslashes( $Email_Title ), $Params);

	$Email_Content = apply_filters('ewd_uwpm_content_pre_substitutions', $Email_Content, $Params);
	$Email_Content = EWD_UWPM_Replace_Classes($Email_Content, $Email->ID);

	$Headers = array('Content-Type: text/html; charset=UTF-8');
	$Headers = apply_filters('ewd_uwpm_headers', $Headers, $Params);

	$Previous_Sends = get_post_meta($Params['Email_ID'], 'EWD_UWPM_Send_Events', true);
	if (!is_array($Previous_Sends)) {$Previous_Sends = array();}

	$Max_ID = 0;
	foreach ($Previous_Sends as $Previous_Send) {$Max_ID = max($Previous_Send['ID'], $Max_ID);}
	$Event_ID = $Max_ID + 1;

	$Send_Event_Data = array(
		'ID' => $Event_ID,
		'Send_Type' => 'List',
		'List_ID' => $Params['List_ID'],
		'Send_Time' => date("Y-m-d H:i:s")
	);

	$Sent_Emails = 0;
	if ($Params['List_ID'] == -2) {
		$Users = EWD_UWPM_Autogenerated_List($Params['Interests'], $Params['WC_Info']);
		foreach ($Users as $User_ID) {
			$User = get_user_by('id', $User_ID);
			$Unsubscribe = get_user_meta($User->ID, 'EWD_UWPM_User_Unsubscribe', true);

			if (($Add_Unsubscribe_Link == "Yes" or $Add_Unsubscribe_Checkbox == "Yes") and $Unsubscribe == "Yes") {continue;}

			$Email_Unique_Identifier = EWD_UWPM_Random_String(20);

			$User_Message = EWD_UWPM_Replace_Variables($Email_Content, $Email_Unique_Identifier, $Params, $User);
			$User_Message = apply_filters('ewd_uwpm_content_post_substitutions', $User_Message, $Params);

			$Email_Address = $User->user_email;
			
			if (wp_mail($Email_Address, $Email_Title, $User_Message, $Headers)) {
				EWD_UWPM_Record_Send($Params['Email_ID'], $User->ID, $Event_ID, $Email_Unique_Identifier);
				do_action('ewd_uwpm_email_sent', $Params, $Email_Unique_Identifier);
				$Sent_Emails++;
			}
		}
	}
	else {
		foreach ($Email_Lists_Array as $Email_Lists_Item) {
			if ($Email_Lists_Item['ID'] != $Params['List_ID']) {continue;}

			foreach ($Email_Lists_Item['Users'] as $User_Object) {
				$User = get_user_by('id', $User_Object->id);
				$Unsubscribe = get_user_meta($User->ID, 'EWD_UWPM_User_Unsubscribe', true);

				if ($Add_Unsubscribe_Link == "Yes" and $Unsubscribe == "Yes") {continue;}

				$Email_Unique_Identifier = EWD_UWPM_Random_String(20);

				$User_Message = EWD_UWPM_Replace_Variables($Email_Content, $Email_Unique_Identifier, $Params, $User);
				$User_Message = apply_filters('ewd_uwpm_content_post_substitutions', $User_Message, $Params);

				$Email_Address = $User->user_email;

				if (wp_mail($Email_Address, $Email_Title, $User_Message, $Headers)) {
					EWD_UWPM_Record_Send($Params['Email_ID'], $User->ID, $Event_ID, $Email_Unique_Identifier);
					do_action('ewd_uwpm_email_sent', $Params, $Email_Unique_Identifier);
					$Sent_Emails++;
				}
			}
		}
	}

	$Send_Event_Data['Emails_Sent'] = $Sent_Emails;
	$Previous_Sends[] = $Send_Event_Data;
	update_post_meta($Params['Email_ID'], 'EWD_UWPM_Send_Events', $Previous_Sends);

	return sprintf(esc_html__("Emails successfully sent out to %d users", 'ultimate-wp-mail'), $Sent_Emails);
}

function EWD_UWPM_Autogenerated_List($Interests, $WC_Info) {
	global $wpdb;

	if (!is_array($Interests)) {$Interests = array();}
	if (!is_array($WC_Info)) {$WC_Info = array();}
	
	$User_IDs = array();
	foreach ($Interests as $Interest_Type => $Categories) {
		if ($Interest_Type == 'Post_Categories') {
			$Meta_Key = 'EWD_UWPM_Post_Interests';
		}
		elseif ($Interest_Type == 'UWPM_Categories') {
			$Meta_Key = 'EWD_UWPM_UWPM_Interests';
		}
		else {
			$Meta_Key = 'EWD_UWPM_WC_Interests';
		}

		foreach ($Categories as $Category) {
			if ($Category == "") {continue;}

			$New_Users = $wpdb->get_results($wpdb->prepare("SELECT user_id FROM $wpdb->usermeta WHERE meta_key=%s AND meta_value LIKE %s", $Meta_Key, '%"' . $Category . '"%'));
			foreach ($New_Users as $User) {$User_IDs[] = $User->user_id;} if ($Interest_Type == 'Post_Categories') {update_option("EWD_UWPM_Debug", $New_Users);}
		}
	} 

	if ($WC_Info['Previous_Purchasers'] != 'false') {
		$Previous_Purchase_Users = $wpdb->get_results("SELECT DISTINCT meta_value FROM $wpdb->postmeta WHERE meta_key='_customer_user'");
		foreach ($Previous_Purchase_Users as $User) {$User_IDs[] = $User->meta_value;}
	}

	if ($WC_Info['Product_Purchasers'] != 'false') {
		if (!is_array($WC_Info['Previous_WC_Products'])) {$WC_Info['Previous_WC_Products'] = array($WC_Info['Previous_WC_Products']);}
		
		$product_id_string = '(';
		$product_id_string .= implode(",", $WC_Info['Previous_WC_Products']);
		$product_id_string .= ')';

		$woocommerce_order_items_table_name = $wpdb->prefix . 'woocommerce_order_items';
		$woocommerce_order_itemmeta_table_name = $wpdb->prefix . 'woocommerce_order_itemmeta';
		
		$Users = $wpdb->get_results(
				"SELECT DISTINCT $wpdb->postmeta.meta_value FROM $wpdb->postmeta 
				INNER JOIN $woocommerce_order_items_table_name ON $wpdb->postmeta.post_id = $woocommerce_order_items_table_name.order_id
				INNER JOIN $woocommerce_order_itemmeta_table_name ON $woocommerce_order_items_table_name.order_item_id = $woocommerce_order_itemmeta_table_name.order_item_id
				WHERE $woocommerce_order_itemmeta_table_name.meta_key = '_product_id' 
				AND $woocommerce_order_itemmeta_table_name.meta_value IN $product_id_string
				AND $wpdb->postmeta.meta_key = '_customer_user'"
		);

		foreach ($Previous_Product_Users as $User) {$User_IDs[] = $User->meta_value;}
	}

	if ($WC_Info['Category_Purchasers'] != 'false') {
		if (!is_array($WC_Info['Previous_WC_Categories'])) {$WC_Info['Previous_WC_Categories'] = array($WC_Info['Previous_WC_Categories']);}
		
		$args = array('post_count' => -1);
		$args['tax_query'] = array(
			array(
				'taxonomy' => 'product_cat',
				'field' => 'term_id',
				'terms' => $WC_Info['Previous_WC_Categories'],
				'include_children' => false
			)
		);
		
		$Products = new WP_Query($args);

		$Product_IDs = array();
		foreach ($Products as $Product) {$Product_IDs[] = $Product->ID;}
		
		$product_id_string = '(';
		$product_id_string .= implode(",", $Product_IDs);
		$product_id_string .= ')';
		
		$woocommerce_order_items_table_name = $wpdb->prefix . 'woocommerce_order_items';
		$woocommerce_order_itemmeta_table_name = $wpdb->prefix . 'woocommerce_order_itemmeta';
		
		$Users = $wpdb->get_results(
				"SELECT DISTINCT $wpdb->postmeta.meta_value FROM $wpdb->postmeta 
				INNER JOIN $woocommerce_order_items_table_name ON $wpdb->postmeta.post_id = $woocommerce_order_items_table_name.order_id
				INNER JOIN $woocommerce_order_itemmeta_table_name ON $woocommerce_order_items_table_name.order_item_id = $woocommerce_order_itemmeta_table_name.order_item_id
				WHERE $woocommerce_order_itemmeta_table_name.meta_key = '_product_id' 
				AND $woocommerce_order_itemmeta_table_name.meta_value IN $product_id_string
				AND $wpdb->postmeta.meta_key = '_customer_user'"
		);
		
		foreach ($Previous_Product_Users as $User) {$User_IDs[] = $User->meta_value;}
	}

	return array_unique($User_IDs);
}

function EWD_UWPM_Email_User($Params) {
	$Add_Unsubscribe_Link = get_option("EWD_UWPM_Add_Unsubscribe_Link");
	$Email_From_Name = get_option("EWD_UWPM_Email_From_Name");
	$Email_From_Email = get_option("EWD_UWPM_Email_From_Email");
	
	$User = get_user_by('id', $Params['User_ID']);

	if ($Email_From_Name != '') {add_filter('wp_mail_from_name', 'EWD_UWPM_Filter_From_Name');}
	if ($Email_From_Email != '') {add_filter('wp_mail_from', 'EWD_UWPM_Filter_From');}

	$Unsubscribe = get_user_meta($User->ID, 'EWD_UWPM_User_Unsubscribe', true);
	if ($Add_Unsubscribe_Link == "Yes" and $Unsubscribe == "Yes") {return;}

	if (isset($Params['Email_ID'])) {$Email = get_post($Params['Email_ID']);}
	$Email_Title = isset($Params['Email_Title']) ? $Params['Email_Title'] : $Email->post_title;
	$Email_Content = isset($Params['Email_Content']) ? $Params['Email_Content'] : get_post_meta($Email->ID, 'EWD_UWPM_Mail_Content', true);
	
	$Email_Title = apply_filters('ewd_uwpm_title', stripslashes( $Email_Title ), $Params);

	$Email_Content = apply_filters('ewd_uwpm_content_pre_substitutions', $Email_Content, $Params);
	$Email_Content = EWD_UWPM_Replace_Classes($Email_Content, $Email->ID);

	$Headers = array('Content-Type: text/html; charset=UTF-8');
	$Headers = apply_filters('ewd_uwpm_headers', $Headers, $Params);

	$Email_Unique_Identifier = EWD_UWPM_Random_String(20);

	$Email_Content = EWD_UWPM_Replace_Variables($Email_Content, $Email_Unique_Identifier, $Params, $User);
	$Email_Content = apply_filters('ewd_uwpm_content_post_substitutions', $Email_Content, $Params);

	$Email_Address = $User->user_email;

	if (isset($Params['Return_Email']) and $Params['Return_Email'] == "Yes") {return $Email_Content;}

	if (wp_mail($Email_Address, $Email_Title, $Email_Content, $Headers)) {
		$Previous_Sends = get_post_meta($Params['Email_ID'], 'EWD_UWPM_Send_Events', true);
		if (!is_array($Previous_Sends)) {$Previous_Sends = array();}

		$Max_ID = 0;
		foreach ($Previous_Sends as $Previous_Send) {$Max_ID = max($Previous_Send['ID'], $Max_ID);}
		$Event_ID = $Max_ID + 1;

		$Previous_Sends[] = array(
			'ID' => $Event_ID,
			'Send_Type' => 'User',
			'User_ID' => $User->ID,
			'Emails_Sent' => 1,
			'Send_Time' => date("Y-m-d H:i:s")
		);
		update_post_meta($Params['Email_ID'], 'EWD_UWPM_Send_Events', $Previous_Sends);

		EWD_UWPM_Record_Send($Params['Email_ID'], $User->ID, $Event_ID, $Email_Unique_Identifier);
		do_action('ewd_uwpm_email_sent', $Params, $Email_Unique_Identifier);

		return __("Email successfully sent to ", 'ultimate-wp-mail') . $User->user_login;
	}
	else {return __("Email failed to send", 'ultimate-wp-mail');}
}

function EWD_URP_Send_Email_To_Non_User($Params){
	EWD_UWPM_Send_Email_To_Non_User($Params);
}

function EWD_UWPM_Send_Email_To_Non_User($Params) {
	$Email_From_Name = get_option("EWD_UWPM_Email_From_Name");
	$Email_From_Email = get_option("EWD_UWPM_Email_From_Email");

	if ($Email_From_Name != '') {add_filter('wp_mail_from_name', 'EWD_UWPM_Filter_From_Name');}
	if ($Email_From_Email != '') {add_filter('wp_mail_from', 'EWD_UWPM_Filter_From');}

	if (isset($Params['Email_ID'])) {$Email = get_post($Params['Email_ID']);}
	$Email_Title = isset($Params['Email_Title']) ? $Params['Email_Title'] : $Email->post_title;
	$Email_Content = isset($Params['Email_Content']) ? $Params['Email_Content'] : get_post_meta($Email->ID, 'EWD_UWPM_Mail_Content', true);
	
	$Email_Title = apply_filters('ewd_uwpm_title', stripslashes( $Email_Title ), $Params);

	$Email_Content = apply_filters('ewd_uwpm_content_pre_substitutions', $Email_Content, $Params);
	$Email_Content = EWD_UWPM_Replace_Classes($Email_Content, $Email->ID);

	$Headers = array('Content-Type: text/html; charset=UTF-8');
	$Headers = apply_filters('ewd_uwpm_headers', $Headers, $Params);

	$Email_Unique_Identifier = EWD_UWPM_Random_String(20);

	$Email_Content = EWD_UWPM_Replace_Variables($Email_Content, $Email_Unique_Identifier, $Params);
	$Email_Content = apply_filters('ewd_uwpm_content_post_substitutions', $Email_Content, $Params);

	$Email_Address = $Params['Email_Address'];

	if (wp_mail($Email_Address, $Email_Title, $Email_Content, $Headers)) {
		do_action('ewd_uwpm_email_sent', $Params, $Email_Unique_Identifier);
		return __("Email successfully sent to ", 'ultimate-wp-mail') . $Params['Email_Address'];
	}
	else {return __("Email failed to send", 'ultimate-wp-mail');}
}

function EWD_UWPM_Send_Email($Email_Address, $Email_ID) {
	$Email_From_Name = get_option("EWD_UWPM_Email_From_Name");
	$Email_From_Email = get_option("EWD_UWPM_Email_From_Email");

	if ($Email_From_Name != '') {add_filter('wp_mail_from_name', 'EWD_UWPM_Filter_From_Name');}
	if ($Email_From_Email != '') {add_filter('wp_mail_from', 'EWD_UWPM_Filter_From');}

	$Email = get_post($Email_ID);
	$Email_Title = $Email->post_title ? $Email->post_title : "Email from " . get_bloginfo('name');
	$Email_Content = get_post_meta($Email->ID, 'EWD_UWPM_Mail_Content', true);
	
	$Email_Title = apply_filters('ewd_uwpm_title', stripslashes( $Email_Title ), $Params);

	$Email_Content = apply_filters('ewd_uwpm_content_pre_substitutions', $Email_Content, $Params);
	$Email_Content = EWD_UWPM_Replace_Classes($Email_Content, $Email->ID);

	$Headers = array('Content-Type: text/html; charset=UTF-8');
	$Headers = apply_filters('ewd_uwpm_headers', $Headers, $Params);

	$User = get_user_by('email', $Email_Address);
	$Email_Content = EWD_UWPM_Replace_Variables($Email_Content, 'identifier', array(), $User);
	$Email_Content = apply_filters('ewd_uwpm_content_post_substitutions', $Email_Content, $Params);

	if (wp_mail($Email_Address, $Email_Title, $Email_Content, $Headers)) {
		do_action('ewd_uwpm_email_sent', $Params, $Email_Unique_Identifier);
		return true;
	}
	else {return false;}
}

function EWD_UWPM_Send_Test_Email($Email_Address, $Email_Title, $Email_Content, $Email_ID) {
	$Email_From_Name = get_option("EWD_UWPM_Email_From_Name");
	$Email_From_Email = get_option("EWD_UWPM_Email_From_Email");

	if ($Email_From_Name != '') {add_filter('wp_mail_from_name', 'EWD_UWPM_Filter_From_Name');}
	if ($Email_From_Email != '') {add_filter('wp_mail_from', 'EWD_UWPM_Filter_From');}
	
	$Email_Title = apply_filters('ewd_uwpm_title', stripslashes( $Email_Title ), $Params);

	$Email_Content = apply_filters('ewd_uwpm_content_pre_substitutions', $Email_Content, $Params);
	$Email_Content = EWD_UWPM_Replace_Classes($Email_Content, $Email_ID);

	$Headers = array('Content-Type: text/html; charset=UTF-8');
	$Headers = apply_filters('ewd_uwpm_headers', $Headers, $Params);

	$Email_Content = EWD_UWPM_Replace_Variables($Email_Content, 'identifier', array());
	$Email_Content = apply_filters('ewd_uwpm_content_post_substitutions', $Email_Content, $Params);

	if (wp_mail($Email_Address, $Email_Title, $Email_Content, $Headers)) {
		do_action('ewd_uwpm_email_sent', $Params, $Email_Unique_Identifier);
		return __("Test email sent to ", 'ultimate-wp-mail') . $Email_Address;
	}
	else {return __('Test email failed to send', 'ultimate-wp-mail');}
}

function EWD_UWPM_Replace_Variables($Message, $Identifier, $Params, $User = null) {
	global $EWD_UWPM_Full_Version;
	global $UWPM_Custom_Element_Types;
	global $Email_Unique_Identifier;

	$Email_Unique_Identifier = $Identifier;

	$Add_Unsubscribe_Link = get_option("EWD_UWPM_Add_Unsubscribe_Link");
	$Track_Opens = get_option("EWD_UWPM_Track_Opens");
	$Track_Clicks = get_option("EWD_UWPM_Track_Clicks");

	$Unsubscribe_Label = get_option("EWD_UWPM_Unsubscribe_Label");
	$Unsubscribe_Label = $Unsubscribe_Label ? $Unsubscribe_Label : __("Unsubscribe", 'ultimate-wp-mail');

	$Contact_Methods = wp_get_user_contact_methods();

	$Search_Array = array(
		'[username]',
		'[fname]',
		'[lname]',
		'[nickname]',
		'[dname]',
		'[email]',
		'[website]'
	);

	$Replace_Array = array(
		($User ? $User->user_login : 'Username'),
		($User ? $User->user_firstname : 'Test'),
		($User ? $User->user_lastname : 'User'),
		($User ? $User->get('nickname') : 'Testy'),
		($User ? $User->display_name : 'Test User'),
		($User ? $User->user_email : 'email@example.com'),
		($User ? $User->user_url : 'http://example.com')
	);

	foreach ($Contact_Methods as $key => $Contact_Method) {
		$Search_Array[] = "[" . $key . ']';
		$Replace_Array[] = ($User ? $User->get($key) : $Contact_Method);
	}

	if (isset($Params['post_id'])) {$Post = get_post($Params['post_id']);}

	array_push($Search_Array, '[post_title]', '[post_content]', '[post_date]', '[post_status]', '[post_type]');
	array_push($Replace_Array, (isset($Post) ? $Post->post_title : ''), (isset($Post) ? $Post->post_content : ''), (isset($Post) ? $Post->post_date : ''), (isset($Post) ? $Post->post_status : ''), (isset($Post) ? $Post->post_type : ''));

	foreach ($UWPM_Custom_Element_Types as $UWPM_Custom_Element_Type) {
		$Callback_Function  = $UWPM_Custom_Element_Type->callback_function;
		$Params['replace_slug'] = $UWPM_Custom_Element_Type->slug; 
		if ($Callback_Function != '') {
			if (is_array($UWPM_Custom_Element_Type->attributes) and !empty($UWPM_Custom_Element_Type->attributes)) {
				$Pattern = "/\[" . $UWPM_Custom_Element_Type->slug . " (.*?)\]/";

				preg_match_all($Pattern, $Message, $Matches);
			
				$Attributes = array();
				if (isset($Matches[1])) {
					foreach ($Matches[1] as $Match) {
						$Attributes_String = $Match;
						foreach ($UWPM_Custom_Element_Type->attributes as $Attribute) {
							$Attribute_Pattern = "/.*" . $Attribute['attribute_name'] . "='(.*?)'.*/";
							preg_match($Attribute_Pattern, $Attributes_String, $Attribute_Match);
							if (isset($Attribute_Match[1])) {
								$Attributes[$Attribute['attribute_name']] = $Attribute_Match[1];
							}
	
							if (strtolower($Attribute['attribute_exact_match']) == 'yes') {
								$Pattern = "/\[" . $UWPM_Custom_Element_Type->slug . " " . $Attribute['attribute_name'] ."='" . $Attribute_Match[1] . "' \]/";
							}
						}
	
						$Params['attributes'] = $Attributes;
						$Replace = $Callback_Function($Params, $User);
	
						$Result = preg_replace($Pattern, $Replace, $Message);
	
						unset($Params['attributes']);
						$Message = $Result;
					}
				}
			}
			else {
				$Search_Array[] = "[" . $UWPM_Custom_Element_Type->slug . "]";
				$Replace_Array[] = $Callback_Function($Params, $User);
			}
		}
	}

	$Modified_Message = str_replace($Search_Array, $Replace_Array, $Message);

	if ($Track_Clicks == "Yes") {
		$Result = preg_replace_callback('/href="(.*?)"/', 'EWD_UWPM_Replace_Links_For_Tracking', $Modified_Message);
		$Final_Message = $Result;
	}
	else {
		$Final_Message = $Modified_Message;
	}

	if ($Add_Unsubscribe_Link == "Yes") {
		$Unsubscribe_Link = site_url() . '/?Action=EWD_UWPM_Unsubscribe&Code=' . ($User ? $User->ID : 0) . 'PL' . round(rand()*1000) . '&Email=' . ($User ? $User->user_email : 'email@example.com');
		$Final_Message .= '<div id="ewd-uwpm-unsubscribe" style="width: 100% !important; background: #ddd; color: #6e6e6e; text-align: center; padding-top: 8px; height: 26px; margin-top: 20px;"><a href="' . $Unsubscribe_Link . '" style="color: #6e6e6e; text-decoration: none;">' . $Unsubscribe_Label . '</a></div>';
	}

	if ($EWD_UWPM_Full_Version != "Yes") {
		$Powered_By = '<a href="https://wordpress.org/plugins/ultimate-wp-mail/">Powered by Ultimate WP Mail</a>';
		$Final_Message .= '<div id="ewd-uwpm-powered-by" style="width: 100% !important; background: #ddd; color: #6e6e6e; text-align: center; padding-top: 8px; height: 26px; margin-top: 20px;">' . $Powered_By . '</div>';
	}

	if ($Track_Opens == "Yes") {
		$Final_Message .= '<img src="' . add_query_arg('ewd_upwm_id', $Email_Unique_Identifier, site_url()) . '" />';
	}

	return $Final_Message;
}

function EWD_UWPM_Replace_Classes($Message, $Email_ID = 0) {
	$Content_Alignment = get_post_meta($Email_ID, 'EWD_UWPM_Content_Alignment', true);
	$Max_Width = get_post_meta($Email_ID, 'EWD_UWPM_Max_Width', true);
	$Email_Background_Color = get_post_meta($Email_ID, 'EWD_UWPM_Email_Background_Color', true);
	$Body_Background_Color = get_post_meta($Email_ID, 'EWD_UWPM_Body_Background_Color', true);
	$Block_Background_Color = get_post_meta($Email_ID, 'EWD_UWPM_Block_Background_Color', true);
	$Block_Border = get_post_meta($Email_ID, 'EWD_UWPM_Block_Border', true);

	$Email_Styling_CSS = '';
	if ($Email_Background_Color != '') {$Email_Styling_CSS .= 'background-color: ' . $Email_Background_Color . ';';}

	$Body_Styling_CSS = '';
	if ($Max_Width != '') {$Body_Styling_CSS .= 'max-width: ' . $Max_Width . ';';}
	else {$Body_Styling_CSS .= 'max-width: 840px;';}
	if ($Content_Alignment == 'center') {$Body_Styling_CSS .= 'margin: 0 auto;';}
	if ($Content_Alignment == 'right') {$Body_Styling_CSS .= 'float:right;';}
	if ($Body_Background_Color != '') {$Body_Styling_CSS .= 'background-color:' . $Body_Background_Color . ';';}

	$Block_Styling_CSS = '';
	if ($Block_Background_Color != '') {$Block_Styling_CSS .= 'background-color: ' . $Block_Background_Color . ';';}
	if ($Block_Border != '') {$Block_Styling_CSS .= 'border: ' . $Block_Border . ';';}

	$Search_Array = array();
	$Replace_Array = array();

	$Search_Array[] = 'class="ewd-uwpm-clear';
	$Replace_Array[] = 'style="clear:both" class="ewd-uwpm-clear';

	$Search_Array[] = 'class="ewd-uwpm-section-container';
	$Replace_Array[] = 'style="width:90%; max-width:840px; margin:12px 5%;" class="ewd-uwpm-section-container';

	$Search_Array[] = 'class="ewd-uwpm-section width-1';
	$Replace_Array[] = 'style="width: calc(100% - 24px); ' . $Block_Styling_CSS . '" class="ewd-uwpm-section width-1';
	
	$Search_Array[] = 'class="ewd-uwpm-section width-2';
	$Replace_Array[] = 'style="width: calc(50% - 30px); float:left; margin-right:30px; ' . $Block_Styling_CSS . '" class="ewd-uwpm-section width-2';

	$Search_Array[] = 'class="ewd-uwpm-section width-3';
	$Replace_Array[] = 'style="width: calc(100% / 3 - 25px); float:left; margin-right:20px; ' . $Block_Styling_CSS . '" class="ewd-uwpm-section width-3';

	$Search_Array[] = 'class="ewd-uwpm-section width-4';
	$Replace_Array[] = 'style="width: calc(25% - 21px); float:left; margin-right:16px; ' . $Block_Styling_CSS . '" class="ewd-uwpm-section width-4';

	$Search_Array[] = 'class="ewd-uwpm-section width-1-3';
	$Replace_Array[] = 'style="width: calc(100% / 3 - 24px); float:left; margin-right:20px; ' . $Block_Styling_CSS . '" class="ewd-uwpm-section width-1-3';

	$Search_Array[] = 'class="ewd-uwpm-section width-2-3';
	$Replace_Array[] = 'style="width: calc(200% / 3 - 24px); float:left; margin-right:20px; ' . $Block_Styling_CSS . '" class="ewd-uwpm-section width-2-3';

	$Modified_Message = str_replace($Search_Array, $Replace_Array, stripslashes($Message));

	$Final_Message = '<div style="' . $Email_Styling_CSS . '">';
	$Final_Message .= '<div style="width:100%; ' . $Body_Styling_CSS . '">';
	$Final_Message .= $Modified_Message;
	$Final_Message .= '</div>';
	$Final_Message .= '<div style="clear:both;"></div>';
	$Final_Message .= '</div>';

	return $Final_Message;
}

function EWD_UWPM_Replace_Links_For_Tracking($match) {
    global $Email_Unique_Identifier;

    return 'href="' . add_query_arg('ewd_upwm_id', $Email_Unique_Identifier, site_url()) . '&ewd_upwm_link_url=' . urlencode($match[1]) . '"';
}

function EWD_UWPM_Record_Send($Email_ID, $User_ID, $Event_ID, $Email_Unique_Identifier) {
	global $wpdb;
	global $ewd_uwpm_email_send_events;

	$Email_Sent_Datetime = date("Y-m-d H:i:s");

	$wpdb->insert(
		$ewd_uwpm_email_send_events,
		array(
			'Email_ID' => $Email_ID,
			'User_ID' => $User_ID,
			'Event_ID' => $Event_ID,
			'Email_Unique_Identifier' => $Email_Unique_Identifier,
			'Email_Sent_Datetime' => $Email_Sent_Datetime
		)
	);
}

function EWD_UWPM_Filter_From($from) {
	$Email_From_Email = get_option("EWD_UWPM_Email_From_Email");

	return $Email_From_Email;
}

function EWD_UWPM_Filter_From_Name($from_name) {
	$Email_From_Name = get_option("EWD_UWPM_Email_From_Name");

	return $Email_From_Name;
}

function EWD_UWPM_Random_String($CharLength = 10) {
	$characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
	$randstring = '';
	for ($i = 0; $i < $CharLength; $i++) {
	    $randstring .= $characters[rand(0, strlen($characters)-1)];
	}
	return $randstring;
}
?>