<?php


include_once "\x78\155\x6c\163\145\x63\x6c\151\x62\x73\x2e\x70\x68\x70";
use RobRichards\XMLSecLibs\XMLSecurityKey;
use RobRichards\XMLSecLibs\XMLSecurityDSig;
use RobRichards\XMLSecLibs\XMLSecEnc;
class Utilities
{
    public static function generateID()
    {
        return "\137" . self::stringToHex(self::generateRandomBytes(21));
    }
    public static function stringToHex($ee)
    {
        $kv = '';
        $Ba = 0;
        qi4:
        if (!($Ba < strlen($ee))) {
            goto bpk;
        }
        $kv .= sprintf("\x25\x30\62\170", ord($ee[$Ba]));
        wZ3:
        $Ba++;
        goto qi4;
        bpk:
        return $kv;
    }
    public static function generateRandomBytes($jl, $IB = TRUE)
    {
        return openssl_random_pseudo_bytes($jl);
    }
    public static function createAuthnRequest($qs, $jj, $nc, $RP = "\x66\141\x6c\x73\x65", $eZ = "\x48\164\164\x70\x52\x65\x64\x69\162\145\143\164", $G3 = '', $cW)
    {
        $tj = $cW["\x69\144\160\x5f\x6e\141\x6d\x65"];
        $G3 = "\165\x72\x6e\x3a\157\x61\x73\151\163\72\156\x61\x6d\x65\163\72\164\143\x3a\123\x41\115\x4c\72" . $G3;
        $FV = "\x3c\77\170\x6d\x6c\x20\166\x65\x72\x73\151\157\156\75\42\61\x2e\x30\42\x20\x65\x6e\x63\157\x64\151\x6e\147\75\42\125\x54\106\55\70\42\77\76" . "\x3c\x73\141\155\x6c\160\72\101\x75\x74\x68\x6e\122\145\x71\165\145\x73\164\x20\170\x6d\154\156\163\x3a\x73\141\x6d\154\x70\x3d\42\x75\162\x6e\72\x6f\x61\163\x69\x73\72\x6e\x61\155\x65\163\72\x74\x63\x3a\x53\101\x4d\114\72\62\56\60\x3a\160\162\157\x74\x6f\143\157\x6c\42\x20\170\x6d\x6c\x6e\163\75\x22\165\x72\x6e\x3a\x6f\141\163\x69\x73\x3a\156\141\155\x65\163\x3a\x74\143\x3a\x53\x41\115\x4c\72\x32\56\x30\x3a\141\x73\x73\145\162\164\151\x6f\156\x22\x20\x49\104\75\x22" . self::generateID() . "\x22\40\x56\x65\162\x73\151\x6f\x6e\x3d\x22\x32\56\60\x22\x20\111\163\x73\x75\x65\x49\156\163\x74\x61\156\164\75\42" . self::generateTimestamp() . "\x22";
        if (!($RP == "\x74\162\165\x65")) {
            goto lQp;
        }
        $FV .= "\x20\106\x6f\x72\x63\145\101\165\x74\x68\x6e\x3d\42\164\x72\165\145\42";
        lQp:
        $FV .= "\x20\120\x72\x6f\x74\x6f\x63\157\154\x42\x69\156\x64\151\156\x67\x3d\42\165\162\x6e\72\x6f\x61\163\x69\x73\x3a\156\x61\155\x65\163\x3a\164\x63\72\x53\101\x4d\114\x3a\62\56\x30\72\142\151\156\x64\151\156\147\163\x3a\x48\x54\x54\x50\x2d\x50\x4f\x53\124\42\x20\101\x73\x73\x65\162\x74\151\157\x6e\103\x6f\x6e\163\x75\x6d\x65\x72\123\145\162\x76\151\x63\x65\125\122\x4c\x3d\42" . $qs . "\42\40\104\x65\x73\x74\x69\x6e\141\x74\151\157\156\x3d\42" . $nc . "\42\76\74\x73\141\x6d\154\72\x49\163\163\x75\145\162\x20\170\x6d\x6c\x6e\x73\x3a\163\141\x6d\154\75\42\165\162\156\72\x6f\x61\x73\x69\x73\72\156\141\155\145\163\72\x74\143\x3a\123\101\115\114\x3a\62\x2e\60\72\x61\x73\x73\145\x72\x74\151\157\156\42\76" . $jj . "\74\x2f\x73\141\x6d\x6c\x3a\x49\x73\x73\x75\145\162\76\74\163\141\x6d\x6c\160\72\x4e\x61\155\145\x49\104\x50\x6f\154\151\x63\x79\x20\101\154\154\x6f\167\103\x72\x65\x61\164\x65\75\x22\164\162\x75\145\x22\x20\106\157\x72\155\x61\164\75\42" . $G3 . "\42\15\xa\x20\40\x20\40\x20\40\x20\x20\x20\x20\40\40\x20\40\x20\40\40\x20\40\x20\40\x20\40\40\57\x3e\x3c\57\x73\141\155\x6c\x70\x3a\101\165\x74\150\x6e\122\x65\x71\165\x65\163\164\76";
        $ns = get_option("\x73\141\x6d\x6c\x5f\151\x64\145\156\x74\x69\x74\171\x5f\x70\162\x6f\166\151\x64\x65\162\x73");
        $ns = maybe_unserialize($ns);
        if (empty($eZ) || $eZ == "\x48\x74\x74\160\122\145\144\151\162\145\143\164") {
            goto XW0;
        }
        $Dj = gzdeflate($FV);
        $yH = base64_encode($Dj);
        $oF = array("\163\x61\155\x6c\137\x72\145\161\x75\145\x73\x74" => $yH);
        $ns[$tj] = array_merge($ns[$tj], $oF);
        $ns = array_filter($ns, "\x66\151\154\x74\145\x72\137\x65\x6d\160\x74\x79\x5f\166\141\154\x75\145\x73");
        update_option("\x73\x61\x6d\154\x5f\x69\x64\x65\x6e\164\x69\x74\x79\137\x70\162\x6f\x76\151\144\145\162\163", $ns);
        goto jw1;
        XW0:
        $Dj = gzdeflate($FV);
        $yH = base64_encode($Dj);
        $oF = array("\x73\141\155\x6c\x5f\x72\145\x71\x75\145\x73\164" => $yH);
        $ns[$tj] = array_merge($ns[$tj], $oF);
        $ns = array_filter($ns, "\x66\x69\154\164\x65\162\x5f\x65\155\160\x74\x79\137\x76\x61\x6c\165\x65\163");
        update_option("\163\x61\155\x6c\x5f\x69\144\x65\x6e\164\151\x74\x79\x5f\160\x72\157\166\x69\144\x65\162\x73", $ns);
        $QD = urlencode($yH);
        $FV = $QD;
        jw1:
        return $FV;
    }
    public static function createLogoutRequest($KB, $oz = '', $jj, $nc, $dC = "\x48\164\x74\x70\122\x65\144\x69\162\145\x63\x74")
    {
        $FV = "\x3c\77\170\155\154\x20\166\x65\x72\163\151\157\156\x3d\x22\x31\x2e\x30\x22\x20\x65\156\x63\157\x64\x69\x6e\x67\75\42\125\124\106\x2d\70\x22\77\x3e" . "\74\x73\141\155\154\x70\x3a\114\x6f\147\157\165\x74\x52\145\x71\x75\145\163\164\40\x78\155\154\x6e\x73\x3a\163\x61\x6d\154\x70\x3d\x22\x75\162\156\72\157\x61\x73\x69\163\72\156\141\155\x65\x73\x3a\164\x63\72\123\101\x4d\x4c\72\x32\56\x30\x3a\x70\162\157\x74\x6f\x63\157\154\42\x20\x78\155\x6c\x6e\x73\72\163\141\155\154\x3d\x22\165\x72\156\x3a\x6f\x61\163\151\x73\72\x6e\x61\155\x65\163\72\164\143\72\x53\x41\x4d\x4c\x3a\x32\56\x30\x3a\141\x73\163\145\162\x74\x69\157\x6e\42\x20\111\x44\x3d\42" . self::generateID() . "\x22\40\x49\163\x73\x75\145\111\156\x73\164\141\x6e\x74\x3d\42" . self::generateTimestamp() . "\x22\40\126\x65\x72\x73\151\x6f\x6e\75\42\62\56\60\x22\x20\104\x65\163\164\151\x6e\x61\164\151\x6f\156\75\x22" . $nc . "\42\x3e\15\12\x9\x9\11\x9\x9\11\x3c\163\141\x6d\x6c\x3a\111\x73\x73\165\x65\162\x20\170\x6d\154\x6e\163\72\x73\141\155\x6c\x3d\42\165\x72\x6e\x3a\x6f\141\x73\x69\163\x3a\156\x61\x6d\x65\163\72\164\x63\x3a\123\x41\115\x4c\72\62\56\60\72\x61\x73\x73\145\x72\x74\x69\157\156\42\x3e" . $jj . "\x3c\57\x73\x61\155\x6c\72\x49\163\163\165\145\x72\x3e\xd\12\11\x9\x9\11\11\11\74\163\141\155\154\72\x4e\x61\x6d\145\111\104\40\170\x6d\154\x6e\x73\72\163\x61\x6d\x6c\75\42\165\162\156\x3a\x6f\x61\x73\151\163\x3a\156\141\x6d\145\163\x3a\164\143\x3a\123\x41\x4d\x4c\x3a\x32\x2e\x30\x3a\x61\x73\163\x65\x72\x74\151\x6f\156\42\x3e" . $KB[0] . "\74\x2f\x73\x61\x6d\x6c\72\116\141\x6d\x65\x49\104\x3e";
        if (empty($oz)) {
            goto we8;
        }
        $FV .= "\x3c\163\141\x6d\154\x70\x3a\x53\145\x73\x73\x69\157\x6e\x49\156\144\145\170\76" . $oz[0] . "\x3c\57\x73\x61\x6d\x6c\x70\72\123\145\x73\163\151\157\x6e\x49\x6e\x64\x65\170\76";
        we8:
        $FV .= "\x3c\x2f\163\141\155\154\160\72\114\157\x67\157\165\164\x52\x65\161\165\x65\163\164\76";
        if (!(empty($dC) || $dC == "\x48\164\164\160\x52\x65\144\x69\162\x65\x63\164")) {
            goto VKS;
        }
        $Dj = gzdeflate($FV);
        $yH = base64_encode($Dj);
        $QD = urlencode($yH);
        $FV = $QD;
        VKS:
        return $FV;
    }
    public static function createLogoutResponse($L2, $jj, $nc, $dC = "\110\x74\164\160\122\145\x64\151\x72\x65\143\164")
    {
        $FV = "\74\77\x78\x6d\154\x20\166\x65\x72\x73\x69\157\x6e\75\x22\61\56\60\42\40\145\x6e\143\x6f\144\151\x6e\x67\x3d\x22\125\x54\106\x2d\70\42\x3f\x3e" . "\74\x73\141\155\x6c\160\x3a\114\x6f\x67\157\x75\164\x52\x65\x73\160\x6f\x6e\163\x65\40\x78\155\x6c\x6e\x73\72\x73\x61\x6d\154\x70\x3d\42\x75\162\156\72\157\141\163\151\x73\x3a\x6e\141\155\x65\x73\x3a\164\x63\72\x53\101\115\114\72\x32\x2e\60\x3a\x70\x72\x6f\x74\157\143\x6f\154\42\40\x78\155\x6c\x6e\x73\72\163\141\x6d\154\75\42\165\162\156\72\157\141\x73\151\163\x3a\x6e\x61\155\x65\x73\x3a\x74\x63\72\x53\x41\115\114\72\x32\56\60\x3a\x61\163\163\x65\162\164\151\157\156\x22\x20" . "\111\104\75\42" . self::generateID() . "\x22\x20" . "\126\145\x72\163\151\x6f\156\75\42\x32\56\x30\x22\40\111\163\x73\x75\x65\x49\x6e\163\164\x61\156\164\x3d\42" . self::generateTimestamp() . "\x22\40" . "\104\x65\x73\164\151\156\x61\164\x69\x6f\x6e\75\x22" . $nc . "\42\40" . "\111\x6e\x52\145\163\160\x6f\x6e\163\145\124\157\x3d\42" . $L2 . "\42\76" . "\x3c\163\141\x6d\154\x3a\111\x73\x73\x75\x65\162\x20\170\x6d\x6c\x6e\x73\72\163\141\155\x6c\x3d\42\165\162\x6e\72\x6f\141\x73\151\x73\x3a\x6e\141\155\145\x73\x3a\164\x63\x3a\123\x41\x4d\x4c\72\x32\x2e\x30\72\141\x73\163\145\x72\x74\x69\157\x6e\42\x3e" . $jj . "\74\57\x73\141\x6d\x6c\x3a\111\x73\163\165\x65\162\x3e" . "\x3c\x73\x61\155\154\x70\72\x53\x74\141\x74\165\163\76\74\x73\x61\155\x6c\x70\72\x53\164\x61\x74\165\x73\x43\x6f\144\145\x20\126\x61\154\165\145\75\x22\165\x72\156\x3a\x6f\141\163\151\163\72\x6e\141\155\x65\x73\x3a\x74\x63\72\123\101\115\114\72\x32\x2e\60\72\163\164\x61\164\165\163\x3a\123\x75\143\143\x65\163\x73\42\x2f\x3e\x3c\x2f\163\141\x6d\x6c\160\72\123\164\141\164\165\163\x3e\x3c\57\163\141\155\154\x70\72\x4c\x6f\x67\x6f\x75\164\x52\145\x73\160\x6f\x6e\163\145\76";
        if (!(empty($dC) || $dC == "\110\x74\164\160\x52\x65\144\x69\x72\145\x63\164")) {
            goto lwx;
        }
        $Dj = gzdeflate($FV);
        $yH = base64_encode($Dj);
        $QD = urlencode($yH);
        $FV = $QD;
        lwx:
        return $FV;
    }
    public static function generateTimestamp($Ev = NULL)
    {
        if (!($Ev === NULL)) {
            goto wlS;
        }
        $Ev = time();
        wlS:
        return gmdate("\131\55\x6d\x2d\144\134\124\110\x3a\151\72\163\134\132", $Ev);
    }
    public static function xpQuery(DOMNode $m0, $M2)
    {
        static $U8 = NULL;
        if ($m0 instanceof DOMDocument) {
            goto Kpj;
        }
        $dK = $m0->ownerDocument;
        goto iKq;
        Kpj:
        $dK = $m0;
        iKq:
        if (!($U8 === NULL || !$U8->document->isSameNode($dK))) {
            goto iMN;
        }
        $U8 = new DOMXPath($dK);
        $U8->registerNamespace("\163\x6f\x61\x70\x2d\x65\x6e\x76", "\150\164\164\x70\72\x2f\57\x73\143\150\x65\x6d\x61\163\56\170\x6d\154\163\157\141\160\56\x6f\x72\147\x2f\x73\157\141\x70\57\x65\156\x76\x65\154\157\160\x65\x2f");
        $U8->registerNamespace("\163\x61\x6d\x6c\x5f\160\162\157\164\x6f\x63\157\154", "\165\162\x6e\x3a\157\141\163\151\x73\x3a\156\141\x6d\145\163\x3a\x74\x63\72\123\x41\115\114\72\x32\56\x30\x3a\160\x72\157\x74\x6f\143\157\154");
        $U8->registerNamespace("\163\x61\155\x6c\137\x61\x73\163\x65\x72\164\x69\157\x6e", "\165\x72\156\72\157\x61\163\151\x73\72\156\x61\155\x65\x73\x3a\x74\143\72\123\101\x4d\114\72\x32\x2e\60\x3a\x61\163\163\145\x72\x74\151\x6f\x6e");
        $U8->registerNamespace("\x73\x61\x6d\x6c\137\155\x65\164\x61\x64\141\x74\x61", "\165\162\x6e\x3a\157\x61\163\151\163\x3a\156\141\x6d\x65\x73\x3a\x74\143\72\123\x41\x4d\114\x3a\x32\x2e\x30\72\x6d\145\164\141\144\x61\x74\x61");
        $U8->registerNamespace("\144\x73", "\150\164\164\x70\72\x2f\57\x77\x77\167\56\167\63\x2e\x6f\x72\x67\57\62\60\60\x30\x2f\60\71\57\x78\x6d\x6c\144\163\x69\147\43");
        $U8->registerNamespace("\170\145\156\143", "\150\x74\164\x70\x3a\57\x2f\167\167\167\x2e\x77\63\56\x6f\162\147\x2f\x32\60\60\x31\x2f\x30\x34\57\170\155\x6c\x65\x6e\143\x23");
        iMN:
        $lX = $U8->query($M2, $m0);
        $kv = array();
        $Ba = 0;
        g_Y:
        if (!($Ba < $lX->length)) {
            goto Tsg;
        }
        $kv[$Ba] = $lX->item($Ba);
        qEe:
        $Ba++;
        goto g_Y;
        Tsg:
        return $kv;
    }
    public static function parseNameId(DOMElement $pe)
    {
        $kv = array("\126\x61\154\165\x65" => trim($pe->textContent));
        foreach (array("\x4e\141\155\x65\x51\x75\141\x6c\x69\146\151\x65\162", "\x53\120\116\x61\x6d\x65\121\165\141\154\x69\146\151\x65\x72", "\106\157\x72\155\141\164") as $rs) {
            if (!$pe->hasAttribute($rs)) {
                goto hmo;
            }
            $kv[$rs] = $pe->getAttribute($rs);
            hmo:
            PUz:
        }
        NVP:
        return $kv;
    }
    public static function xsDateTimeToTimestamp($y3)
    {
        $Ho = array();
        $Gz = "\57\136\50\x5c\x64\134\144\134\144\134\x64\51\55\50\x5c\x64\x5c\144\x29\x2d\50\x5c\144\x5c\x64\x29\x54\50\134\144\134\x64\51\72\x28\x5c\x64\134\144\x29\72\x28\134\x64\x5c\144\x29\50\77\x3a\x5c\x2e\x5c\x64\53\x29\77\132\x24\57\104";
        if (!(preg_match($Gz, $y3, $Ho) == 0)) {
            goto Vgn;
        }
        echo sprintf("\111\x6e\x76\141\154\151\144\x20\123\x41\x4d\114\62\x20\x74\x69\x6d\x65\x73\164\141\155\160\40\x70\x61\163\x73\145\x64\x20\x74\157\x20\x78\163\x44\x61\x74\x65\x54\151\155\145\x54\x6f\x54\x69\155\x65\163\x74\141\155\160\x3a\40" . $y3);
        die;
        Vgn:
        $Ra = intval($Ho[1]);
        $ko = intval($Ho[2]);
        $mY = intval($Ho[3]);
        $FK = intval($Ho[4]);
        $yN = intval($Ho[5]);
        $i8 = intval($Ho[6]);
        $zd = gmmktime($FK, $yN, $i8, $ko, $mY, $Ra);
        return $zd;
    }
    public static function extractStrings(DOMElement $UX, $gt, $WQ)
    {
        $kv = array();
        $m0 = $UX->firstChild;
        pmn:
        if (!($m0 !== NULL)) {
            goto CF9;
        }
        if (!($m0->namespaceURI !== $gt || $m0->localName !== $WQ)) {
            goto fJ0;
        }
        goto nEH;
        fJ0:
        $kv[] = trim($m0->textContent);
        nEH:
        $m0 = $m0->nextSibling;
        goto pmn;
        CF9:
        return $kv;
    }
    public static function validateElement(DOMElement $Jy)
    {
        $gi = new XMLSecurityDSig();
        $gi->idKeys[] = "\111\104";
        $KV = self::xpQuery($Jy, "\56\x2f\x64\163\x3a\123\x69\x67\156\x61\164\165\162\145");
        if (count($KV) === 0) {
            goto leC;
        }
        if (count($KV) > 1) {
            goto HLm;
        }
        goto Y7I;
        leC:
        return FALSE;
        goto Y7I;
        HLm:
        echo sprintf("\130\x4d\x4c\123\x65\143\72\x20\x6d\x6f\x72\145\40\164\150\x61\x6e\x20\157\156\x65\x20\163\x69\x67\156\141\x74\165\x72\145\40\x65\154\x65\x6d\x65\x6e\164\40\151\156\x20\162\x6f\x6f\x74\56");
        die;
        Y7I:
        $KV = $KV[0];
        $gi->sigNode = $KV;
        $gi->canonicalizeSignedInfo();
        if ($gi->validateReference()) {
            goto bz9;
        }
        echo sprintf("\130\115\114\163\145\143\x3a\40\144\x69\x67\x65\x73\x74\x20\166\141\x6c\151\x64\x61\164\151\x6f\156\x20\x66\x61\151\x6c\145\x64");
        die;
        bz9:
        $PQ = FALSE;
        foreach ($gi->getValidatedNodes() as $Uq) {
            if ($Uq->isSameNode($Jy)) {
                goto sXL;
            }
            if ($Jy->parentNode instanceof DOMDocument && $Uq->isSameNode($Jy->ownerDocument)) {
                goto sqX;
            }
            goto iI0;
            sXL:
            $PQ = TRUE;
            goto mln;
            goto iI0;
            sqX:
            $PQ = TRUE;
            goto mln;
            iI0:
            aMj:
        }
        mln:
        if ($PQ) {
            goto ZFw;
        }
        echo sprintf("\x58\115\114\x53\145\143\72\x20\124\x68\145\x20\x72\157\x6f\x74\x20\x65\154\145\155\x65\x6e\164\40\x69\163\x20\x6e\x6f\164\40\163\x69\x67\x6e\x65\144\56");
        die;
        ZFw:
        $KC = array();
        foreach (self::xpQuery($KV, "\56\57\x64\x73\72\113\145\171\111\x6e\x66\x6f\57\x64\x73\x3a\x58\x35\60\71\x44\141\x74\141\57\x64\x73\72\x58\65\x30\x39\103\145\162\164\x69\146\x69\x63\x61\x74\x65") as $xe) {
            $pR = trim($xe->textContent);
            $pR = str_replace(array("\xd", "\12", "\x9", "\40"), '', $pR);
            $KC[] = $pR;
            kHY:
        }
        gXZ:
        $kv = array("\123\151\147\x6e\141\x74\x75\x72\x65" => $gi, "\103\x65\162\164\x69\146\151\x63\141\164\145\163" => $KC);
        return $kv;
    }
    public static function validateSignature(array $XN, XMLSecurityKey $nA)
    {
        $gi = $XN["\123\151\147\156\141\x74\165\162\145"];
        $GE = self::xpQuery($gi->sigNode, "\56\57\144\163\72\x53\151\147\x6e\x65\x64\x49\156\x66\x6f\57\x64\x73\x3a\x53\151\147\x6e\x61\164\x75\162\145\115\x65\164\x68\157\144");
        if (!empty($GE)) {
            goto Qw2;
        }
        echo sprintf("\115\151\163\x73\151\x6e\x67\x20\123\x69\147\156\141\x74\x75\162\145\x4d\145\164\x68\157\x64\x20\x65\x6c\145\x6d\145\156\164");
        die;
        Qw2:
        $GE = $GE[0];
        if ($GE->hasAttribute("\x41\x6c\x67\157\x72\x69\164\x68\x6d")) {
            goto ayI;
        }
        echo sprintf("\x4d\151\163\163\151\156\x67\40\x41\154\x67\x6f\162\151\164\x68\155\x2d\x61\x74\x74\162\x69\142\x75\164\145\40\157\x6e\40\123\x69\147\x6e\x61\x74\165\162\145\x4d\x65\x74\x68\x6f\x64\40\145\x6c\145\155\145\156\x74\x2e");
        die;
        ayI:
        $Eo = $GE->getAttribute("\x41\154\x67\x6f\162\x69\x74\x68\155");
        if (!($nA->type === XMLSecurityKey::RSA_SHA1 && $Eo !== $nA->type)) {
            goto nZl;
        }
        $nA = self::castKey($nA, $Eo);
        nZl:
        if ($gi->verify($nA)) {
            goto WJ_;
        }
        echo sprintf("\125\156\141\142\x6c\145\40\x74\x6f\x20\x76\x61\154\151\144\141\x74\x65\40\123\x69\x67\x6e\x61\x74\165\162\145");
        die;
        WJ_:
    }
    public static function castKey(XMLSecurityKey $nA, $wh, $Cq = "\x70\165\142\154\151\143")
    {
        if (!($nA->type === $wh)) {
            goto t1u;
        }
        return $nA;
        t1u:
        $m8 = openssl_pkey_get_details($nA->key);
        if (!($m8 === FALSE)) {
            goto rVz;
        }
        echo sprintf("\125\156\x61\142\x6c\145\x20\164\x6f\x20\x67\145\164\x20\x6b\145\171\40\144\145\x74\141\151\154\163\40\146\x72\157\x6d\40\130\115\114\123\145\143\165\162\x69\x74\171\x4b\145\x79\56");
        die;
        rVz:
        if (isset($m8["\x6b\145\171"])) {
            goto wAe;
        }
        echo sprintf("\x4d\x69\163\x73\151\x6e\147\40\x6b\145\x79\40\151\x6e\x20\x70\x75\x62\154\151\143\x20\153\145\x79\x20\144\x65\164\141\x69\x6c\163\56");
        die;
        wAe:
        $ri = new XMLSecurityKey($wh, array("\164\x79\x70\x65" => $Cq));
        $ri->loadKey($m8["\153\x65\x79"]);
        return $ri;
    }
    public static function processResponse($tM, $Yq, $uM, SAML2_Response $SE, $z0, $hZ)
    {
        $F7 = current($SE->getAssertions());
        $VJ = $F7->getNotBefore();
        if (!($VJ !== NULL && $VJ > time() + 60)) {
            goto AHG;
        }
        wp_die("\122\145\x63\x65\151\166\145\x64\40\141\x6e\x20\x61\163\x73\145\162\164\x69\157\x6e\40\x74\150\x61\x74\x20\151\163\40\166\x61\x6c\x69\144\40\151\156\x20\x74\150\145\40\146\x75\164\165\x72\x65\56\x20\x43\150\x65\x63\153\40\143\x6c\x6f\x63\x6b\40\x73\171\x6e\143\x68\x72\x6f\x6e\151\x7a\141\164\x69\x6f\x6e\40\157\156\40\111\144\120\x20\x61\156\144\40\x53\x50\56");
        AHG:
        $Sq = $F7->getNotOnOrAfter();
        if (!($Sq !== NULL && $Sq <= time() - 60)) {
            goto dD8;
        }
        wp_die("\122\x65\x63\x65\x69\166\145\144\40\141\x6e\40\141\x73\163\x65\162\x74\x69\x6f\156\40\x74\150\x61\164\40\x68\141\x73\x20\145\170\x70\151\x72\145\x64\x2e\x20\103\x68\145\x63\153\40\x63\154\x6f\143\x6b\x20\x73\x79\156\143\x68\162\x6f\156\x69\x7a\141\164\151\157\x6e\x20\157\156\40\111\144\x50\x20\x61\156\x64\x20\123\120\56");
        dD8:
        $HW = $F7->getSessionNotOnOrAfter();
        if (!($HW !== NULL && $HW <= time() - 60)) {
            goto Y87;
        }
        wp_die("\122\145\143\145\151\166\145\x64\x20\141\156\x20\141\163\x73\x65\x72\164\151\157\156\x20\x77\x69\x74\150\40\141\x20\163\x65\163\163\x69\x6f\x6e\x20\164\x68\141\x74\x20\x68\141\x73\x20\x65\170\160\151\162\x65\144\56\40\103\x68\x65\x63\153\40\x63\x6c\x6f\143\153\x20\163\x79\156\143\x68\162\x6f\156\151\x7a\141\164\x69\x6f\156\x20\x6f\156\40\x49\x64\120\x20\141\x6e\144\x20\x53\x50\x2e");
        Y87:
        $MB = $SE->getDestination();
        if (!(substr($MB, -1) == "\x2f")) {
            goto fhZ;
        }
        $MB = substr($MB, 0, -1);
        fhZ:
        if (!(substr($tM, -1) == "\x2f")) {
            goto ccS;
        }
        $tM = substr($tM, 0, -1);
        ccS:
        if (!($MB !== NULL && $MB !== $tM)) {
            goto pKW;
        }
        echo "\x44\145\163\164\x69\156\141\164\151\157\x6e\40\x69\156\40\162\x65\x73\x70\157\x6e\163\145\40\x64\157\145\x73\156\x27\164\x20\155\x61\164\143\150\x20\x74\x68\145\40\x63\165\x72\x72\145\156\164\x20\125\x52\x4c\x2e\40\x44\145\163\164\151\156\141\164\151\x6f\x6e\x20\151\163\40\x22" . htmlspecialchars($MB) . "\x22\54\40\143\165\162\162\145\x6e\164\40\125\x52\114\40\x69\x73\40\x22" . htmlspecialchars($tM) . "\x22\x2e";
        die;
        pKW:
        $RN = self::checkSign($Yq, $uM, $z0);
        return $RN;
    }
    public static function checkSign($Yq, $uM, $z0)
    {
        $KC = $uM["\x43\145\162\x74\151\x66\x69\143\141\164\x65\x73"];
        if (count($KC) === 0) {
            goto h0n;
        }
        $On = self::findCertificate($Yq, $KC);
        if (!($On == false)) {
            goto CSJ;
        }
        return false;
        CSJ:
        goto ioQ;
        h0n:
        $On = self::sanitize_certificate($z0);
        ioQ:
        $Ey = NULL;
        $nA = new XMLSecurityKey(XMLSecurityKey::RSA_SHA1, array("\164\171\x70\x65" => "\160\165\142\x6c\x69\x63"));
        $nA->loadKey($On);
        try {
            self::validateSignature($uM, $nA);
            return TRUE;
        } catch (Exception $GP) {
            $Ey = $GP;
        }
        if ($Ey !== NULL) {
            goto cUJ;
        }
        return FALSE;
        goto GKu;
        cUJ:
        throw $Ey;
        GKu:
    }
    public static function validateIssuerAndAudience($Mi, $qe, $aO, $hZ, $nh)
    {
        $jj = current($Mi->getAssertions())->getIssuer();
        $F7 = current($Mi->getAssertions());
        $Ig = $F7->getValidAudiences();
        if (strcmp($aO, $jj) === 0) {
            goto P_u;
        }
        if ($hZ == "\164\x65\163\164\x56\141\x6c\151\144\x61\164\145") {
            goto EPt;
        }
        wp_die("\127\145\x20\x63\x6f\x75\154\x64\40\156\157\x74\x20\163\x69\x67\x6e\x20\x79\157\x75\x20\151\156\x2e\x20\x50\154\145\x61\x73\x65\x20\x63\x6f\x6e\x74\x61\143\164\x20\171\x6f\x75\162\x20\101\x64\155\x69\156\151\x73\x74\x72\x61\x74\157\162", "\105\162\162\x6f\162\x20\x3a\x49\163\163\x75\145\x72\40\x63\x61\x6e\x6e\157\x74\x20\x62\x65\40\166\145\162\x69\x66\x69\x65\x64");
        goto WJA;
        EPt:
        ob_end_clean();
        $T6 = mo_options_error_constants::Error_issuer_not_verfied;
        $Qo = mo_options_error_constants::Cause_issuer_not_verfied;
        echo "\74\x64\151\166\40\163\164\x79\x6c\145\75\42\146\x6f\156\x74\x2d\x66\x61\x6d\x69\x6c\x79\72\x43\141\x6c\151\x62\162\151\73\160\141\144\144\x69\156\147\72\60\x20\63\45\73\x22\76";
        echo "\x3c\144\x69\x76\40\x73\164\171\154\x65\x3d\42\143\x6f\x6c\157\162\72\40\x23\141\71\x34\64\x34\x32\x3b\142\141\143\x6b\x67\162\157\165\x6e\x64\x2d\143\157\154\157\x72\x3a\x20\x23\x66\x32\x64\x65\x64\x65\73\160\141\x64\x64\151\156\x67\72\40\61\x35\160\x78\x3b\x6d\141\162\x67\151\x6e\x2d\142\x6f\x74\x74\x6f\x6d\x3a\x20\x32\x30\160\x78\73\164\145\170\x74\x2d\141\x6c\151\147\x6e\72\143\145\x6e\164\x65\162\x3b\x62\x6f\162\144\x65\162\x3a\x31\160\170\x20\x73\x6f\154\151\144\x20\x23\105\x36\102\63\x42\x32\x3b\146\x6f\156\x74\55\x73\151\172\x65\x3a\x31\70\x70\164\73\x22\76\x20\x45\x52\122\x4f\122\x3c\57\x64\151\x76\x3e\xd\12\x9\x9\11\x20\74\144\151\166\40\x73\164\171\x6c\x65\x3d\42\143\157\154\157\162\72\40\43\x61\x39\64\64\64\x32\x3b\146\x6f\156\x74\x2d\x73\x69\172\x65\72\x31\x34\x70\x74\x3b\40\155\x61\x72\x67\x69\x6e\55\142\x6f\164\x74\x6f\x6d\x3a\62\60\160\x78\73\x22\x3e\x3c\160\x3e\x3c\x73\164\162\157\x6e\147\76\105\x72\162\157\x72\72\x20\74\x2f\x73\164\x72\157\156\147\76\x49\163\163\165\145\162\x20\143\141\156\x6e\x6f\x74\x20\142\x65\x20\166\x65\x72\151\x66\151\x65\144\56\x3c\57\x70\x3e\xd\xa\x9\11\11\40\74\160\x3e\120\x6c\x65\x61\x73\x65\40\x63\157\156\x74\141\143\x74\x20\171\157\x75\x72\40\141\144\x6d\x69\156\x69\x73\164\162\141\x74\x6f\162\40\141\156\144\40\x72\x65\160\157\162\164\40\164\x68\145\x20\x66\x6f\x6c\x6c\157\167\151\156\147\40\x65\x72\x72\x6f\x72\72\74\x2f\x70\x3e\15\xa\11\11\11\x20\x3c\x70\76\x3c\163\164\x72\x6f\156\x67\x3e\x50\x6f\163\x73\x69\142\154\x65\x20\103\x61\165\x73\145\x3a\x20\x3c\x2f\163\164\x72\x6f\x6e\x67\76\111\144\x50\x20\x45\x6e\x74\x69\164\x79\x20\111\104\40\143\157\156\146\x69\147\165\162\145\x64\40\151\x6e\x20\164\x68\x65\40\x70\x6c\x75\147\x69\x6e\x20\x69\163\40\x69\156\x63\x6f\162\162\145\143\164\74\57\160\76\15\xa\11\11\x9\40\x3c\x70\76\x3c\163\164\162\x6f\156\x67\76\x45\x6e\x74\x69\x74\171\x20\x49\x44\x20\x69\156\x20\x53\x41\x4d\114\40\122\145\163\x70\x6f\x6e\x73\145\x3a\40\74\57\x73\164\x72\157\x6e\147\76" . $jj . "\74\x70\x3e\15\xa\11\x9\x9\40\x3c\160\x3e\74\x73\164\162\x6f\156\x67\76\x45\156\164\x69\164\x79\x20\111\104\x20\x63\x6f\156\x66\x69\147\165\162\x65\x64\40\x69\x6e\40\x74\150\x65\x20\x70\x6c\165\x67\151\156\72\x20\x3c\57\x73\x74\162\157\x6e\x67\76" . $aO . "\x3c\57\160\x3e\xd\12\40\x20\x20\x20\40\x20\x20\x20\40\40\40\x20\40\x3c\x70\76\74\x73\164\x72\x6f\x6e\147\76\123\x6f\x6c\165\x74\x69\x6f\x6e\72\74\57\163\x74\162\157\x6e\147\x3e\x3c\x2f\160\x3e\15\xa\x9\x9\x9\x9\74\x6f\x6c\76\15\xa\11\x9\x9\x9\x9\x3c\x6c\151\x3e\103\157\160\x79\40\x74\x68\x65\x20\x45\x6e\x74\x69\x74\171\x20\x49\x44\x20\157\x66\40\x53\x41\x4d\114\40\x52\x65\x73\x70\157\156\163\x65\x20\x66\x72\x6f\x6d\x20\141\x62\157\x76\145\40\141\x6e\x64\40\x70\141\163\164\145\x20\151\x74\x20\x69\156\x20\105\x6e\x74\151\164\x79\40\x49\104\x20\x6f\x72\x20\x49\x73\163\165\145\x72\40\146\x69\x65\x6c\x64\x20\165\x6e\x64\x65\162\x20\x53\145\162\166\x69\x63\x65\40\120\x72\x6f\x76\x69\144\x65\162\x20\123\145\164\x75\x70\40\164\141\x62\x2e\74\57\x6c\151\76\15\12\11\11\11\11\x3c\x2f\157\x6c\x3e\xd\12\x20\40\x20\x20\40\x20\40\x20\40\40\40\x20\x20\x3c\x2f\x64\x69\166\x3e\xd\xa\x9\x9\11\x20\74\144\151\166\40\163\x74\x79\154\145\x3d\42\155\x61\162\147\151\156\72\x33\45\x3b\144\151\163\x70\x6c\x61\171\x3a\x62\154\x6f\x63\153\73\x74\x65\170\x74\55\141\x6c\151\147\x6e\x3a\143\145\x6e\x74\145\162\x3b\x22\x3e\xd\12\11\x9\x9\40\x3c\x64\151\166\x20\163\x74\171\154\145\x3d\42\155\141\162\147\x69\156\72\63\x25\73\x64\x69\x73\160\154\141\x79\72\142\154\x6f\x63\x6b\x3b\164\145\x78\164\x2d\x61\154\x69\x67\x6e\72\x63\145\156\x74\145\x72\73\42\x3e\x3c\151\x6e\x70\165\x74\x20\163\164\171\x6c\145\x3d\x22\x70\141\144\144\151\x6e\x67\72\x31\45\73\x77\x69\x64\x74\150\x3a\x31\60\x30\x70\170\73\x62\141\143\153\x67\162\157\165\x6e\x64\x3a\x20\x23\x30\60\x39\61\x43\x44\x20\x6e\x6f\156\145\x20\162\145\160\145\x61\164\40\x73\x63\162\x6f\x6c\x6c\40\x30\45\40\60\x25\x3b\143\x75\x72\x73\157\x72\x3a\40\x70\157\x69\x6e\x74\x65\x72\x3b\146\157\x6e\164\55\x73\x69\x7a\145\x3a\x31\65\x70\x78\73\142\x6f\162\x64\x65\162\55\x77\151\144\164\150\72\x20\x31\160\x78\73\142\x6f\162\x64\x65\x72\x2d\163\x74\171\x6c\145\x3a\x20\163\157\x6c\151\144\73\142\157\162\144\145\x72\55\x72\x61\144\151\165\x73\x3a\40\x33\x70\x78\x3b\167\150\151\164\145\55\163\x70\141\x63\145\72\x20\x6e\x6f\167\162\141\x70\73\x62\x6f\170\55\x73\151\172\151\x6e\147\x3a\40\142\x6f\x72\144\x65\x72\55\x62\x6f\170\73\142\x6f\162\144\x65\162\x2d\143\157\154\x6f\x72\x3a\x20\x23\x30\x30\67\63\101\x41\x3b\x62\x6f\170\x2d\x73\150\x61\144\x6f\x77\72\x20\x30\160\170\40\x31\160\x78\40\60\x70\170\40\162\x67\x62\x61\50\x31\x32\60\54\x20\x32\60\x30\54\40\62\x33\60\54\x20\60\x2e\x36\x29\x20\x69\x6e\163\145\x74\73\143\x6f\x6c\157\162\72\40\x23\106\x46\106\73\42\164\171\160\145\75\x22\x62\165\x74\x74\157\x6e\42\x20\166\141\x6c\165\x65\x3d\42\104\x6f\x6e\x65\42\40\157\x6e\103\154\151\x63\x6b\75\42\163\x65\x6c\146\x2e\x63\154\x6f\163\x65\x28\x29\x3b\42\76\x3c\x2f\x64\x69\166\76";
        mo_saml_download_logs($T6, $Qo, $nh);
        die;
        WJA:
        goto rHx;
        P_u:
        if (empty($Ig)) {
            goto gRj;
        }
        if (in_array($qe, $Ig, TRUE)) {
            goto w32;
        }
        if ($hZ == "\x74\145\x73\x74\x56\141\x6c\151\x64\x61\x74\x65") {
            goto AFn;
        }
        wp_die("\127\145\x20\x63\x6f\x75\x6c\144\40\156\x6f\x74\x20\163\x69\x67\x6e\40\171\157\x75\40\x69\156\x2e\40\x50\x6c\145\141\x73\145\40\143\157\156\x74\141\143\164\x20\x79\x6f\165\162\x20\x41\144\155\x69\156\x69\x73\x74\162\x61\164\157\162", "\105\162\x72\x6f\x72\40\72\111\x6e\166\x61\154\151\x64\40\x41\x75\144\151\x65\x6e\x63\x65\x20\125\x52\111");
        goto Jev;
        AFn:
        $T6 = mo_options_error_constants::Error_invalid_audience;
        $Qo = mo_options_error_constants::Cause_invalid_audience;
        ob_end_clean();
        echo "\x3c\x64\151\x76\x20\163\164\x79\x6c\x65\75\42\146\157\156\x74\55\x66\x61\x6d\x69\x6c\171\x3a\x43\x61\x6c\x69\x62\162\151\73\160\x61\144\144\x69\156\147\72\x30\x20\x33\x25\73\x22\x3e";
        echo "\74\x64\x69\166\40\163\164\x79\154\145\x3d\42\143\x6f\154\157\162\72\x20\x23\x61\x39\x34\64\64\62\73\x62\141\143\153\147\x72\x6f\x75\x6e\x64\x2d\x63\x6f\x6c\157\x72\x3a\x20\43\146\x32\x64\145\144\x65\73\160\141\144\x64\151\156\147\72\x20\x31\x35\x70\x78\73\155\x61\x72\147\x69\156\x2d\x62\x6f\164\164\x6f\x6d\72\40\62\x30\x70\170\x3b\164\145\170\x74\x2d\x61\154\151\147\x6e\72\143\145\156\164\x65\162\x3b\x62\x6f\x72\144\x65\x72\72\61\160\170\x20\x73\x6f\x6c\151\144\x20\43\105\x36\102\x33\x42\62\x3b\x66\157\156\164\55\x73\x69\172\145\x3a\x31\x38\x70\164\x3b\42\x3e\x20\105\x52\x52\117\122\74\57\144\x69\x76\76\15\xa\40\40\40\40\x20\40\40\40\x20\40\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x64\x69\166\40\x73\x74\x79\154\x65\x3d\x22\143\x6f\x6c\x6f\x72\72\x20\x23\x61\x39\64\64\x34\62\73\x66\157\x6e\x74\55\x73\151\x7a\x65\x3a\x31\64\x70\x74\73\40\155\141\x72\147\151\x6e\55\142\157\x74\x74\157\155\72\x32\60\160\170\x3b\x22\x3e\x3c\160\76\x3c\x73\x74\x72\x6f\x6e\x67\x3e\105\x72\x72\157\x72\72\40\74\57\x73\164\162\x6f\x6e\147\x3e\111\156\166\x61\154\151\x64\x20\101\x75\x64\x69\x65\156\x63\x65\x20\x55\x52\x49\x2e\74\57\160\x3e\xd\12\x20\x20\40\x20\x20\x20\x20\40\40\x20\x20\x20\x20\x20\40\40\40\x20\x20\40\x3c\x70\76\x50\x6c\145\x61\163\x65\x20\143\157\x6e\x74\x61\143\164\40\171\x6f\x75\162\x20\x61\x64\155\151\156\x69\x73\x74\x72\141\164\x6f\x72\40\x61\x6e\144\x20\x72\x65\x70\x6f\x72\164\x20\164\x68\x65\40\x66\157\x6c\x6c\x6f\167\151\x6e\x67\x20\x65\162\162\x6f\162\x3a\74\57\160\76\15\xa\40\x20\40\40\40\x20\x20\40\40\x20\40\40\x20\x20\40\40\40\40\x20\x20\x3c\160\76\x3c\x73\164\x72\157\156\x67\76\120\157\163\163\151\142\154\x65\40\103\141\x75\163\x65\72\x20\74\57\163\x74\162\157\156\147\x3e\124\150\x65\x20\166\x61\x6c\165\x65\40\157\146\40\47\x41\x75\144\x69\145\156\143\x65\x20\125\x52\x49\47\x20\x66\x69\145\x6c\x64\x20\157\x6e\x20\x49\x64\145\x6e\164\x69\164\x79\x20\x50\162\157\x76\x69\x64\x65\162\x27\x73\x20\163\151\144\145\x20\x69\163\x20\151\x6e\x63\157\162\162\x65\x63\164\x3c\x2f\160\76\15\12\40\x20\40\x20\x20\40\x20\x20\x20\x20\x20\40\x20\x20\40\x20\40\x20\40\x20\x3c\160\76\x45\170\160\x65\143\x74\x65\x64\40\x6f\x6e\145\40\157\x66\40\164\150\145\x20\x41\x75\144\151\x65\156\x63\145\x73\x20\164\x6f\40\142\x65\x3a\40" . $qe . "\x3c\x70\76\15\12\x20\x20\x20\40\40\40\40\40\x20\x20\x20\40\40\40\x20\x20\40\x20\40\x20\74\160\76\x3c\x73\x74\162\x6f\x6e\x67\x3e\x53\x6f\x6c\165\164\151\157\x6e\72\74\x2f\x73\x74\162\157\156\147\76\x3c\57\160\x3e\15\12\11\11\x9\x9\x9\74\157\154\x3e\xd\xa\x9\x9\x9\11\x9\11\x3c\x6c\x69\x3e\103\x6f\160\x79\x20\164\x68\x65\x20\x45\170\160\x65\x63\x74\x65\x64\x20\101\x75\x64\151\x65\156\143\145\x20\x55\122\111\40\146\x72\x6f\155\x20\141\142\157\x76\x65\40\141\x6e\144\40\x70\x61\x73\x74\145\40\x69\164\40\151\156\x20\164\x68\x65\x20\101\x75\x64\151\145\x6e\143\145\x20\x55\122\x49\x20\x66\x69\x65\154\x64\x20\x61\x74\40\111\x64\145\156\x74\151\164\171\x20\120\x72\x6f\x76\151\x64\x65\162\40\163\x69\x64\x65\x2e\x3c\x2f\154\151\x3e\15\xa\11\11\11\x9\x9\x3c\57\x6f\x6c\x3e\xd\12\40\x20\x20\x20\x20\x20\x20\x20\x20\x20\40\x20\40\x20\40\40\x20\40\40\40\x3c\57\x64\151\x76\76\xd\12\x20\x20\40\40\x20\40\x20\40\40\x20\x20\40\40\x20\x20\x20\x20\x20\x20\x20\x3c\x64\151\166\x20\163\164\x79\x6c\x65\x3d\42\155\141\162\x67\151\156\x3a\x33\x25\x3b\x64\x69\163\160\x6c\141\171\x3a\142\154\x6f\143\153\73\164\145\x78\164\55\141\x6c\151\147\x6e\72\143\x65\156\x74\145\162\x3b\42\x3e\xd\xa\x20\x20\40\x20\40\40\40\x20\x20\40\x20\40\x20\x20\40\40\40\40\x20\40\74\144\151\166\40\163\x74\171\154\x65\x3d\x22\x6d\141\162\147\x69\156\x3a\x33\45\x3b\x64\x69\163\160\154\x61\171\72\x62\x6c\x6f\x63\x6b\x3b\x74\x65\170\164\x2d\141\154\x69\x67\156\72\x63\145\x6e\164\x65\x72\x3b\42\x3e\74\151\156\160\165\164\x20\x73\164\171\154\x65\75\42\160\141\144\144\x69\156\x67\72\x31\x25\73\167\x69\144\x74\x68\72\61\x30\x30\x70\170\x3b\142\141\143\x6b\147\162\x6f\165\x6e\144\72\40\43\60\x30\71\x31\x43\x44\40\x6e\x6f\x6e\145\40\x72\x65\x70\145\x61\164\x20\163\143\162\x6f\154\154\40\60\x25\x20\x30\x25\73\143\x75\162\163\157\x72\72\40\160\x6f\x69\156\164\x65\162\x3b\146\157\x6e\x74\x2d\x73\x69\172\145\x3a\61\65\x70\170\x3b\x62\x6f\162\144\145\x72\x2d\167\151\144\x74\x68\x3a\x20\x31\160\x78\x3b\x62\x6f\x72\144\145\162\x2d\163\x74\171\x6c\x65\72\x20\x73\x6f\x6c\x69\x64\73\142\157\162\144\145\x72\55\x72\141\144\x69\165\x73\x3a\40\63\160\170\73\x77\150\151\164\145\x2d\x73\x70\141\143\x65\x3a\x20\x6e\x6f\167\162\141\x70\x3b\x62\x6f\170\x2d\x73\x69\172\x69\156\147\x3a\x20\x62\x6f\x72\x64\x65\162\x2d\x62\x6f\x78\73\x62\x6f\162\144\x65\162\55\143\x6f\x6c\x6f\x72\x3a\40\43\60\x30\67\63\101\101\73\x62\157\170\55\x73\x68\x61\x64\157\x77\x3a\x20\60\x70\170\40\x31\x70\x78\40\x30\x70\170\40\162\147\x62\x61\50\61\62\60\54\x20\62\x30\60\54\x20\62\x33\60\x2c\x20\x30\x2e\66\51\x20\x69\156\163\145\164\x3b\x63\157\154\x6f\x72\x3a\x20\43\x46\106\106\73\x22\x74\x79\x70\145\75\x22\142\165\x74\x74\x6f\x6e\42\40\x76\141\154\x75\x65\x3d\x22\x44\157\x6e\145\x22\40\157\156\x43\154\151\x63\153\x3d\x22\x73\145\154\146\x2e\x63\154\x6f\x73\145\50\51\x3b\x22\76\74\57\144\151\x76\x3e";
        die;
        mo_saml_download_logs($T6, $Qo, $nh);
        Jev:
        goto OAo;
        w32:
        return TRUE;
        OAo:
        gRj:
        rHx:
    }
    private static function findCertificate($Yq, $KC)
    {
        $Yf = array();
        foreach ($KC as $CH) {
            $Se = strtolower(sha1(base64_decode($CH)));
            if ($Se == $Yq) {
                goto Jwc;
            }
            $Yf[] = $Se;
            return false;
            goto Qfv;
            Jwc:
            $sH = "\x2d\55\55\55\55\102\x45\x47\111\x4e\x20\x43\x45\122\x54\111\x46\111\x43\x41\124\x45\x2d\x2d\55\x2d\55\12" . chunk_split($CH, 64) . "\55\x2d\55\x2d\x2d\x45\116\104\x20\103\105\x52\x54\x49\x46\x49\x43\101\124\x45\55\55\55\55\55\xa";
            return $sH;
            Qfv:
            i5h:
        }
        tEW:
    }
    private static function doDecryptElement(DOMElement $hS, XMLSecurityKey $Vn, array &$Y9)
    {
        $uK = new XMLSecEnc();
        $uK->setNode($hS);
        $uK->type = $hS->getAttribute("\124\x79\160\145");
        $ou = $uK->locateKey($hS);
        if ($ou) {
            goto uDN;
        }
        echo sprintf("\x43\x6f\165\154\x64\x20\x6e\x6f\164\x20\x6c\157\143\x61\x74\145\x20\x6b\x65\x79\x20\x61\x6c\x67\x6f\162\151\164\x68\155\x20\151\156\40\x65\156\x63\x72\x79\160\164\145\144\x20\144\x61\x74\141\56");
        die;
        uDN:
        $t5 = $uK->locateKeyInfo($ou);
        if ($t5) {
            goto B7o;
        }
        echo sprintf("\x43\x6f\165\x6c\144\40\x6e\x6f\x74\x20\154\157\143\141\164\145\40\x3c\x64\x73\151\147\x3a\x4b\x65\171\111\156\x66\x6f\76\x20\x66\157\162\x20\164\150\145\x20\145\x6e\143\162\x79\160\164\145\x64\x20\x6b\x65\171\x2e");
        die;
        B7o:
        $DB = $Vn->getAlgorith();
        if ($t5->isEncrypted) {
            goto Pq8;
        }
        $My = $ou->getAlgorith();
        if (!($DB !== $My)) {
            goto A8G;
        }
        echo sprintf("\101\x6c\147\157\162\151\164\150\155\40\155\x69\x73\x6d\141\x74\x63\x68\x20\142\x65\164\167\x65\145\156\x20\x69\x6e\x70\165\164\x20\x6b\x65\171\x20\x61\x6e\x64\x20\153\145\x79\x20\151\156\x20\x6d\x65\x73\163\141\x67\145\x2e\40" . "\113\x65\171\x20\167\141\x73\x3a\x20" . var_export($DB, TRUE) . "\x3b\40\x6d\145\163\x73\x61\x67\x65\40\167\141\x73\72\x20" . var_export($My, TRUE));
        die;
        A8G:
        $ou = $Vn;
        goto sPK;
        Pq8:
        $z1 = $t5->getAlgorith();
        if (!in_array($z1, $Y9, TRUE)) {
            goto JVN;
        }
        echo sprintf("\x41\154\x67\157\x72\x69\164\150\155\40\144\151\x73\x61\x62\x6c\x65\144\x3a\40" . var_export($z1, TRUE));
        die;
        JVN:
        if (!($z1 === XMLSecurityKey::RSA_OAEP_MGF1P && $DB === XMLSecurityKey::RSA_1_5)) {
            goto O4U;
        }
        $DB = XMLSecurityKey::RSA_OAEP_MGF1P;
        O4U:
        if (!($DB !== $z1)) {
            goto e_6;
        }
        echo sprintf("\101\x6c\x67\157\x72\x69\x74\x68\x6d\x20\155\151\x73\155\141\164\x63\150\40\x62\145\164\x77\145\x65\156\x20\151\156\x70\x75\164\40\153\145\x79\x20\141\x6e\144\x20\x6b\x65\x79\x20\165\x73\x65\x64\40\x74\157\x20\145\156\143\x72\171\x70\164\x20" . "\x20\x74\150\x65\x20\x73\x79\155\x6d\145\x74\x72\x69\x63\40\153\145\x79\40\x66\x6f\x72\x20\164\x68\x65\40\155\x65\163\163\141\147\x65\x2e\40\113\145\x79\x20\167\141\163\x3a\40" . var_export($DB, TRUE) . "\73\40\x6d\145\163\x73\141\x67\x65\40\167\141\163\x3a\40" . var_export($z1, TRUE));
        die;
        e_6:
        $pF = $t5->encryptedCtx;
        $t5->key = $Vn->key;
        $GT = $ou->getSymmetricKeySize();
        if (!($GT === NULL)) {
            goto UbD;
        }
        echo sprintf("\125\x6e\153\x6e\x6f\167\x6e\x20\153\145\x79\x20\x73\x69\x7a\145\x20\x66\x6f\x72\40\x65\x6e\143\162\x79\160\164\151\x6f\x6e\x20\141\154\147\157\x72\151\x74\150\155\72\x20" . var_export($ou->type, TRUE));
        die;
        UbD:
        try {
            $nA = $pF->decryptKey($t5);
            if (!(strlen($nA) != $GT)) {
                goto JrN;
            }
            echo sprintf("\x55\x6e\145\170\x70\145\x63\x74\145\144\x20\x6b\x65\x79\40\163\151\x7a\x65\40\50" . strlen($nA) * 8 . "\x62\x69\x74\163\x29\x20\x66\x6f\162\40\145\156\143\x72\x79\x70\164\151\157\156\40\141\154\x67\x6f\x72\x69\164\150\155\72\x20" . var_export($ou->type, TRUE));
            die;
            JrN:
        } catch (Exception $GP) {
            $If = $pF->getCipherValue();
            $V_ = openssl_pkey_get_details($t5->key);
            $V_ = sha1(serialize($V_), TRUE);
            $nA = sha1($If . $V_, TRUE);
            if (strlen($nA) > $GT) {
                goto HTX;
            }
            if (strlen($nA) < $GT) {
                goto qaK;
            }
            goto aHa;
            HTX:
            $nA = substr($nA, 0, $GT);
            goto aHa;
            qaK:
            $nA = str_pad($nA, $GT);
            aHa:
        }
        $ou->loadkey($nA);
        sPK:
        $wh = $ou->getAlgorith();
        if (!in_array($wh, $Y9, TRUE)) {
            goto s2K;
        }
        echo sprintf("\x41\x6c\147\157\x72\x69\164\150\155\x20\144\x69\163\x61\x62\154\145\x64\72\40" . var_export($wh, TRUE));
        die;
        s2K:
        $xo = $uK->decryptNode($ou, FALSE);
        $pe = "\x3c\162\x6f\x6f\164\x20\x78\155\154\x6e\x73\72\x73\141\155\x6c\x3d\42\165\x72\x6e\72\157\x61\x73\151\x73\x3a\156\x61\x6d\145\x73\x3a\x74\143\x3a\123\101\x4d\114\72\x32\56\60\72\141\x73\163\x65\x72\164\x69\157\156\42\x20" . "\x78\x6d\x6c\x6e\x73\72\x78\x73\x69\75\x22\x68\x74\164\x70\72\57\57\x77\x77\x77\x2e\167\x33\x2e\157\x72\x67\x2f\x32\x30\x30\x31\x2f\130\x4d\114\x53\143\x68\x65\155\x61\55\151\156\163\x74\x61\156\x63\145\42\x3e" . $xo . "\74\57\x72\157\157\164\x3e";
        $ew = new DOMDocument();
        if (@$ew->loadXML($pe)) {
            goto K3A;
        }
        echo sprintf("\106\141\151\x6c\145\x64\x20\164\x6f\x20\x70\141\162\163\145\40\144\x65\143\x72\x79\x70\x74\145\x64\40\130\x4d\114\56\40\115\141\171\142\x65\40\x74\x68\145\40\x77\162\x6f\x6e\x67\x20\x73\x68\141\162\145\144\x6b\145\x79\x20\x77\x61\x73\x20\x75\x73\x65\144\77");
        throw new Exception("\106\x61\151\x6c\x65\x64\40\x74\x6f\40\x70\141\x72\x73\x65\40\x64\145\143\x72\x79\x70\164\145\144\40\130\x4d\114\x2e\40\x4d\x61\x79\142\x65\x20\164\x68\145\40\167\x72\x6f\x6e\x67\40\163\x68\141\162\x65\x64\153\145\x79\40\167\x61\x73\x20\165\x73\x65\144\x3f");
        K3A:
        $GZ = $ew->firstChild->firstChild;
        if (!($GZ === NULL)) {
            goto jNW;
        }
        echo sprintf("\115\151\x73\163\151\156\147\x20\145\156\143\162\171\160\x74\145\144\x20\x65\x6c\145\155\x65\x6e\164\x2e");
        throw new Exception("\x4d\x69\x73\x73\x69\x6e\147\40\x65\156\143\162\171\x70\x74\x65\144\40\x65\x6c\x65\155\145\x6e\x74\x2e");
        jNW:
        if ($GZ instanceof DOMElement) {
            goto I28;
        }
        echo sprintf("\x44\x65\143\162\171\x70\x74\145\144\40\145\x6c\145\x6d\145\x6e\x74\40\167\x61\x73\x20\156\x6f\164\x20\x61\143\x74\165\141\x6c\x6c\x79\40\x61\x20\x44\117\115\x45\154\x65\x6d\145\x6e\x74\56");
        I28:
        return $GZ;
    }
    public static function decryptElement(DOMElement $hS, XMLSecurityKey $Vn, array $Y9 = array(), XMLSecurityKey $lx = NULL)
    {
        try {
            return self::doDecryptElement($hS, $Vn, $Y9);
        } catch (Exception $GP) {
            try {
            } catch (Exception $gS) {
            }
            echo sprintf("\x46\x61\x69\154\145\144\40\x74\x6f\40\144\x65\x63\x72\171\160\x74\x20\130\x4d\x4c\40\145\x6c\145\155\145\156\x74\56");
            die;
        }
    }
    public static function get_mapped_groups($KJ, $xl)
    {
        $x5 = array();
        if (empty($xl)) {
            goto M7r;
        }
        $tG = array();
        $Ba = 1;
        KB1:
        if (!($Ba < 10)) {
            goto ziA;
        }
        $Gg = $KJ->get("\x67\162\157\165\x70" . $Ba . "\137\x6d\x61\x70");
        $tG[$Ba] = explode("\x3b", $Gg);
        $Ba++;
        goto KB1;
        ziA:
        M7r:
        foreach ($xl as $vY) {
            if (empty($vY)) {
                goto w7k;
            }
            $Ba = 0;
            $z4 = false;
            j2S:
            if (!($Ba < 9 && !$z4)) {
                goto Krx;
            }
            if (!(!empty($tG[$Ba]) && in_array($vY, $tG[$Ba]))) {
                goto BFY;
            }
            $x5[] = $KJ->get("\147\162\x6f\165\x70" . $Ba);
            $z4 = true;
            BFY:
            $Ba++;
            goto j2S;
            Krx:
            w7k:
            fL5:
        }
        p0A:
        return array_unique($x5);
    }
    public static function getEncryptionAlgorithm($L_)
    {
        switch ($L_) {
            case "\x68\x74\x74\x70\72\x2f\x2f\x77\x77\167\56\x77\63\56\x6f\x72\x67\x2f\x32\60\x30\61\x2f\60\64\x2f\170\155\154\145\156\143\43\164\162\x69\160\x6c\145\144\x65\x73\55\x63\x62\143":
                return XMLSecurityKey::TRIPLEDES_CBC;
                goto MtA;
            case "\150\164\164\160\x3a\57\x2f\167\x77\x77\x2e\x77\63\x2e\x6f\x72\147\57\x32\x30\60\x31\x2f\60\64\57\x78\155\x6c\145\156\143\x23\141\x65\163\61\x32\x38\x2d\143\x62\143":
                return XMLSecurityKey::AES128_CBC;
            case "\150\x74\164\x70\72\57\57\167\167\167\x2e\x77\63\56\157\162\147\57\62\x30\60\61\x2f\60\64\57\170\155\x6c\x65\156\x63\43\x61\x65\x73\61\x39\x32\x2d\143\x62\143":
                return XMLSecurityKey::AES192_CBC;
                goto MtA;
            case "\150\x74\164\x70\x3a\x2f\57\167\x77\167\x2e\167\x33\x2e\x6f\x72\147\57\62\60\x30\61\x2f\x30\64\x2f\170\155\154\x65\156\143\x23\141\x65\163\62\x35\66\x2d\143\x62\143":
                return XMLSecurityKey::AES256_CBC;
                goto MtA;
            case "\x68\x74\x74\160\72\x2f\x2f\x77\x77\x77\56\x77\63\56\x6f\x72\147\x2f\x32\x30\x30\61\x2f\x30\64\x2f\170\x6d\x6c\x65\156\x63\43\162\x73\141\x2d\x31\137\x35":
                return XMLSecurityKey::RSA_1_5;
                goto MtA;
            case "\x68\164\x74\160\72\57\x2f\167\x77\167\x2e\167\x33\x2e\x6f\162\x67\x2f\62\60\x30\61\57\x30\x34\x2f\x78\x6d\x6c\145\x6e\143\x23\x72\163\141\x2d\x6f\141\x65\x70\55\155\147\x66\61\160":
                return XMLSecurityKey::RSA_OAEP_MGF1P;
                goto MtA;
            case "\150\164\x74\160\72\57\57\167\167\167\56\167\x33\x2e\157\x72\147\x2f\62\60\x30\x30\x2f\x30\71\57\x78\x6d\154\x64\x73\x69\147\43\x64\163\x61\55\x73\x68\x61\61":
                return XMLSecurityKey::DSA_SHA1;
                goto MtA;
            case "\x68\164\x74\x70\x3a\57\57\167\x77\x77\56\x77\x33\56\x6f\x72\147\57\x32\x30\60\x30\57\x30\71\57\x78\x6d\154\x64\x73\151\147\43\162\163\x61\x2d\x73\x68\x61\x31":
                return XMLSecurityKey::RSA_SHA1;
                goto MtA;
            case "\x68\164\x74\x70\x3a\57\x2f\x77\x77\x77\x2e\167\x33\56\x6f\162\147\57\62\x30\60\x31\57\x30\x34\x2f\170\155\x6c\144\163\x69\147\55\x6d\157\162\x65\43\x72\163\x61\x2d\163\150\141\x32\65\x36":
                return XMLSecurityKey::RSA_SHA256;
                goto MtA;
            case "\150\x74\x74\160\72\57\x2f\x77\167\x77\x2e\167\63\56\x6f\x72\x67\x2f\x32\60\x30\x31\57\x30\x34\x2f\170\155\154\144\x73\151\147\55\x6d\x6f\x72\145\x23\x72\163\141\55\163\x68\141\x33\70\x34":
                return XMLSecurityKey::RSA_SHA384;
                goto MtA;
            case "\150\x74\x74\160\x3a\x2f\x2f\167\x77\x77\56\x77\x33\x2e\x6f\x72\147\x2f\62\60\x30\61\57\x30\x34\57\x78\x6d\x6c\x64\x73\x69\147\55\x6d\157\162\x65\x23\x72\163\x61\x2d\x73\x68\x61\x35\x31\62":
                return XMLSecurityKey::RSA_SHA512;
                goto MtA;
            default:
                echo sprintf("\x49\x6e\166\141\x6c\151\144\40\105\156\x63\x72\171\x70\164\151\157\156\x20\x4d\x65\x74\150\157\144\72\40" . $L_);
                die;
                goto MtA;
        }
        rdB:
        MtA:
    }
    public static function insertSignature(XMLSecurityKey $nA, array $KC, DOMElement $Jy, DOMNode $Nh = NULL)
    {
        $gi = new XMLSecurityDSig();
        $gi->setCanonicalMethod(XMLSecurityDSig::EXC_C14N);
        switch ($nA->type) {
            case XMLSecurityKey::RSA_SHA256:
                $Cq = XMLSecurityDSig::SHA256;
                goto MEj;
            case XMLSecurityKey::RSA_SHA384:
                $Cq = XMLSecurityDSig::SHA384;
                goto MEj;
            case XMLSecurityKey::RSA_SHA512:
                $Cq = XMLSecurityDSig::SHA512;
                goto MEj;
            default:
                $Cq = XMLSecurityDSig::SHA1;
        }
        cba:
        MEj:
        $gi->addReferenceList(array($Jy), $Cq, array("\150\x74\164\x70\x3a\x2f\x2f\x77\167\167\56\167\63\56\157\162\x67\57\x32\x30\60\x30\x2f\60\71\57\170\155\x6c\x64\x73\151\147\43\x65\x6e\166\145\x6c\157\160\145\144\55\x73\x69\x67\156\141\x74\165\162\x65", XMLSecurityDSig::EXC_C14N), array("\151\x64\137\x6e\x61\155\145" => "\x49\x44", "\x6f\166\145\x72\167\162\151\164\x65" => FALSE));
        $gi->sign($nA);
        foreach ($KC as $pu) {
            $gi->add509Cert($pu, TRUE);
            tU2:
        }
        YBG:
        $gi->insertSignature($Jy, $Nh);
    }
    public static function getRemainingDaysOfCurrentCertificate()
    {
        $pu = get_option("\155\157\x5f\x73\x61\x6d\154\137\143\165\162\162\145\156\x74\137\143\145\x72\x74");
        $Zx = openssl_x509_parse($pu);
        $ij = $Zx["\x76\x61\x6c\x69\144\x54\x6f\137\x74\151\x6d\x65\x5f\x74"];
        $Bk = $ij - time();
        return round($Bk / (60 * 60 * 24));
    }
    public static function getExpiryDateOfCurrentCertificate()
    {
        $pu = get_option("\x6d\x6f\137\x73\x61\155\x6c\137\x63\x75\162\162\x65\156\x74\137\x63\x65\162\164");
        $Zx = openssl_x509_parse($pu);
        return $Zx["\x76\x61\x6c\151\x64\124\157\x5f\164\151\155\145\137\x74"];
    }
    function getValidUntilDateFromCert($pu)
    {
        $Zx = openssl_x509_parse($pu);
        $ij = $Zx["\166\141\154\151\144\x54\x6f\x5f\x74\x69\x6d\145\x5f\164"];
        $mU = date("\x59\55\x6d\x2d\x64", $ij);
        $DC = $mU . "\x54\x32\63\x3a\x35\71\72\x35\71\x5a";
        return $DC;
    }
    public static function signXML($pe, $hR = '', $nh, $Iy = false)
    {
        $Me = array("\164\171\x70\145" => "\x70\x72\x69\x76\141\x74\145");
        $nA = new XMLSecurityKey(XMLSecurityKey::RSA_SHA256, $Me);
        if ($Iy) {
            goto AHF;
        }
        $VP = mo_saml_get_sp_private_key_for_idp($nh);
        $So = mo_saml_get_sp_public_cert_for_idp($nh);
        goto eL6;
        AHF:
        $VP = file_get_contents(plugin_dir_path(__FILE__) . "\x72\x65\163\157\x75\162\143\x65\x73" . DIRECTORY_SEPARATOR . "\x6d\151\156\151\157\162\141\156\147\x65\x5f\163\160\137\x6c\141\x74\145\163\164\137\160\x72\x69\166\x2e\x6b\x65\x79");
        $So = file_get_contents(plugin_dir_path(__FILE__) . "\162\x65\163\x6f\165\162\x63\x65\x73" . DIRECTORY_SEPARATOR . "\x6d\x69\x6e\151\x6f\162\x61\x6e\x67\145\137\163\x70\137\154\141\x74\x65\163\164\56\x63\x72\164");
        eL6:
        $nA->loadKey($VP, FALSE);
        $YQ = new DOMDocument();
        $YQ->loadXML($pe);
        $Qp = $YQ->firstChild;
        if (!empty($hR)) {
            goto eDN;
        }
        self::insertSignature($nA, array($So), $Qp);
        goto B3N;
        eDN:
        $TN = $YQ->getElementsByTagName($hR)->item(0);
        self::insertSignature($nA, array($So), $Qp, $TN);
        B3N:
        $Mk = $Qp->ownerDocument->saveXML($Qp);
        $RQ = base64_encode($Mk);
        return $RQ;
    }
    public static function postSAMLRequest($Vm, $E6, $hZ, $U5 = false)
    {
        echo "\74\150\x74\x6d\154\76\x3c\150\145\141\x64\76\x3c\163\x63\x72\x69\160\x74\x20\163\x72\x63\75\x27\x68\164\164\160\x73\72\x2f\57\x63\x6f\144\x65\x2e\x6a\161\x75\x65\x72\x79\x2e\143\x6f\155\57\152\161\x75\145\162\171\55\x31\x2e\x31\x31\x2e\x33\x2e\155\x69\156\x2e\152\163\x27\x3e\74\x2f\x73\143\162\x69\160\164\76\x3c\x73\x63\162\x69\160\164\40\164\x79\160\x65\x3d\x22\164\145\x78\x74\57\152\141\166\141\x73\143\x72\151\x70\164\x22\x3e\x24\50\x66\165\156\x63\164\x69\157\156\x28\x29\x7b\144\x6f\143\165\155\x65\x6e\164\56\x66\157\162\x6d\x73\x5b\x27\163\141\155\x6c\55\x72\145\x71\x75\x65\x73\x74\55\146\157\x72\155\47\135\x2e\x73\165\142\155\151\x74\50\51\73\175\x29\x3b\74\57\163\143\162\151\x70\164\x3e\x3c\57\x68\145\141\144\76\74\142\x6f\144\x79\x3e\x50\x6c\145\141\163\145\40\x77\141\x69\x74\x2e\x2e\56\74\x66\x6f\162\155\40\141\143\x74\x69\x6f\156\x3d\42" . $Vm . "\x22\40\x6d\x65\x74\x68\157\x64\75\42\160\x6f\x73\x74\42\40\151\144\75\42\163\141\x6d\x6c\x2d\x72\145\x71\165\145\163\x74\x2d\146\x6f\x72\x6d\42\76\74\151\156\x70\x75\164\x20\x74\171\160\145\75\42\150\x69\144\x64\145\156\42\x20\156\x61\x6d\x65\x3d\x22\123\101\115\114\122\x65\161\165\x65\163\x74\42\x20\x76\141\x6c\165\x65\x3d\42" . $E6 . "\x22\x20\x2f\76\74\151\x6e\x70\165\x74\40\x74\x79\160\145\75\x22\150\151\x64\x64\x65\156\x22\40\156\x61\x6d\x65\x3d\x22\x52\145\154\x61\171\123\164\141\x74\145\x22\40\166\x61\x6c\x75\145\75\42" . htmlentities($hZ) . "\42\x20\x2f\x3e";
        if (!$U5) {
            goto odo;
        }
        echo "\x3c\151\x6e\160\x75\164\40\164\171\160\x65\75\42\x68\x69\x64\x64\x65\x6e\x22\x20\156\141\155\145\75\x22\x45\155\x61\x69\154\42\x20\x76\x61\x6c\x75\x65\75\x22" . htmlentities($U5) . "\x22\40\x2f\x3e";
        odo:
        echo "\74\57\x66\x6f\x72\155\76\x3c\57\142\157\144\171\x3e\x3c\57\x68\164\155\154\x3e";
        die;
    }
    public static function postSAMLResponse($Vm, $Vo, $hZ)
    {
        echo "\x3c\x68\164\x6d\154\76\x3c\x68\145\x61\x64\x3e\74\x73\x63\x72\151\160\164\x20\x73\162\x63\75\47\150\164\x74\160\163\72\x2f\x2f\x63\x6f\x64\145\x2e\x6a\161\x75\x65\162\x79\x2e\x63\157\x6d\57\x6a\x71\x75\x65\x72\171\x2d\61\x2e\61\x31\x2e\x33\56\x6d\x69\156\56\152\163\x27\x3e\74\x2f\x73\x63\x72\151\160\x74\76\74\x73\143\162\151\x70\164\x20\x74\171\160\x65\x3d\x22\164\x65\170\x74\57\x6a\x61\166\x61\x73\x63\162\151\x70\164\42\x3e\x24\x28\146\165\x6e\x63\164\151\157\x6e\x28\51\x7b\x64\157\143\x75\x6d\x65\156\x74\x2e\146\157\162\x6d\x73\x5b\x27\163\141\155\x6c\55\x72\145\161\165\145\163\x74\x2d\x66\x6f\162\155\x27\135\x2e\x73\x75\x62\x6d\151\164\x28\x29\73\175\51\73\x3c\57\163\143\162\x69\160\164\76\x3c\57\x68\145\x61\144\x3e\x3c\142\x6f\144\171\76\120\x6c\x65\141\163\145\x20\167\141\x69\x74\x2e\56\x2e\74\146\x6f\162\x6d\40\141\x63\164\151\157\x6e\x3d\x22" . $Vm . "\42\40\155\145\x74\x68\157\144\75\x22\160\x6f\x73\164\42\40\x69\144\75\x22\163\x61\155\x6c\x2d\x72\145\161\x75\x65\163\x74\x2d\x66\157\162\155\42\76\74\151\x6e\x70\165\x74\40\x74\171\x70\x65\75\x22\150\151\x64\x64\x65\x6e\42\x20\156\141\x6d\x65\x3d\x22\123\x41\115\x4c\122\145\x73\x70\x6f\x6e\163\x65\42\x20\166\141\154\x75\145\75\42" . $Vo . "\42\x20\x2f\x3e\x3c\151\x6e\160\165\164\x20\x74\x79\x70\145\75\x22\x68\151\144\x64\x65\x6e\42\x20\156\141\x6d\x65\x3d\42\122\145\154\141\x79\123\x74\141\x74\x65\x22\40\166\x61\x6c\x75\145\75\42" . htmlentities($hZ) . "\42\40\57\x3e\74\57\146\x6f\x72\x6d\x3e\x3c\57\142\x6f\x64\x79\x3e\74\57\x68\x74\x6d\154\76";
        die;
    }
    public static function sanitize_certificate($pu)
    {
        $pu = preg_replace("\x2f\133\xd\xa\x5d\53\57", '', $pu);
        $pu = str_replace("\x2d", '', $pu);
        $pu = str_replace("\102\105\x47\x49\116\x20\103\105\122\x54\x49\106\x49\103\101\x54\105", '', $pu);
        $pu = str_replace("\105\x4e\x44\x20\103\x45\122\124\x49\x46\x49\103\101\124\x45", '', $pu);
        $pu = str_replace("\40", '', $pu);
        $pu = chunk_split($pu, 64, "\15\xa");
        $pu = "\55\55\x2d\x2d\55\102\105\x47\x49\116\40\x43\105\122\124\x49\x46\111\x43\101\x54\x45\x2d\x2d\x2d\55\55\xd\12" . $pu . "\x2d\55\55\55\55\x45\x4e\104\x20\103\105\122\124\x49\x46\111\x43\x41\124\105\55\x2d\x2d\x2d\55";
        return $pu;
    }
    public static function desanitize_certificate($pu)
    {
        $pu = preg_replace("\x2f\x5b\15\12\x5d\x2b\57", '', $pu);
        $pu = str_replace("\x2d\x2d\x2d\55\55\102\x45\x47\111\x4e\40\x43\105\x52\124\x49\106\111\103\101\x54\x45\55\x2d\55\55\55", '', $pu);
        $pu = str_replace("\55\x2d\x2d\55\55\105\x4e\x44\x20\x43\x45\122\124\x49\106\111\103\101\x54\x45\55\55\55\55\x2d", '', $pu);
        $pu = str_replace("\x20", '', $pu);
        return $pu;
    }
    public static function mo_saml_wp_remote_call($Vm, $Mr = array(), $XL = false, $Ad)
    {
        if (!$XL) {
            goto MCH;
        }
        $SE = wp_remote_get($Vm, $Mr);
        goto d5a;
        MCH:
        $SE = wp_remote_post($Vm, $Mr);
        d5a:
        if (!is_wp_error($SE)) {
            goto mgb;
        }
        $zB = $Ad;
        update_option("\x6d\x6f\x5f\x73\141\x6d\154\x5f\x6d\145\x73\163\141\147\145", "\125\156\141\x62\154\145\x20\x74\157\x20\143\157\156\x6e\x65\143\164\40\164\157\40\x74\150\x65\40\111\156\164\x65\162\156\x65\x74\x2e\40\x50\x6c\x65\x61\163\x65\x20\164\162\x79\40\x61\147\141\151\156\x2e");
        $zB->mo_saml_show_error_message();
        return;
        goto TcA;
        mgb:
        return $SE["\x62\x6f\144\x79"];
        TcA:
    }
    public static function mo_idp_limit_reached($c_ = false)
    {
        $ns = maybe_unserialize(get_option("\x73\141\x6d\x6c\137\x69\x64\145\156\x74\x69\164\x79\x5f\160\x72\x6f\166\x69\x64\x65\162\x73"));
        $JS = 0;
        if (!(!empty($ns) and is_array($ns))) {
            goto MZW;
        }
        foreach ($ns as $tj => $nh) {
            if (array_key_exists("\x65\156\141\x62\154\x65\x5f\x69\x64\x70", $nh)) {
                goto Fyd;
            }
            $ns[$tj]["\145\156\x61\x62\154\145\137\151\x64\x70"] = false;
            Fyd:
            if (!$ns[$tj]["\145\156\x61\142\154\145\x5f\x69\x64\160"]) {
                goto Nmj;
            }
            $JS++;
            Nmj:
            XC3:
        }
        VOP:
        MZW:
        $nA = get_option("\155\x6f\x5f\163\141\155\x6c\x5f\x63\x75\x73\x74\x6f\x6d\x65\162\x5f\x74\157\153\x65\x6e");
        $f2 = (int) AESEncryption::decrypt_data(get_option("\x6e\x6f\137\x6f\146\137\x73\160"), $nA);
        if (!$c_) {
            goto fMS;
        }
        $JS++;
        fMS:
        if ($f2 < $JS) {
            goto h8N;
        }
        return false;
        goto sfu;
        h8N:
        return true;
        sfu:
    }
}
?>
